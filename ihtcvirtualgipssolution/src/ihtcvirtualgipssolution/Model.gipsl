package "ihtcvirtualgipssolution"
import "platform:/resource/ihtcvirtualmetamodel/model/Ihtcvirtualmetamodel.ecore"

config {  
	solver := GUROBI;
	timeLimit := true [value := 300.0];
	randomSeed := true [value := 0];
	presolve := true;
	debugOutput := true;
}

//
// GT
//

// Rule that selects a VirtualShiftToWorkload-Node to be adopted in the final model. 
rule selectShiftToFirstWorkload {
	p : Patient {
		- firstWorkload -> w
	}
	
	w : Workload {
		- virtualShift -> vsw
		- virtualCapacity -> vwc
	}
	
	vwc : VirtualWorkloadToCapacity
	
	vsw : VirtualShiftToWorkload {
		- requires_virtualWorkloadToCapacity -> vwc
		.isSelected := true
	}
}

// Rule that selects an extending VirtualShiftToWorkload-Node to be adopted in the final model. 
rule selectExtendingShiftToFirstWorkload {

	prevvsw : VirtualShiftToWorkload {
		- enables_virtualShiftToWorkload -> nextvsw
	}
	
	nextvsw : VirtualShiftToWorkload {
		.isSelected := true
		- requires_virtualShiftToWorkload -> prevvsw
	}
}

// Rule that selects an operation day for a patient. 
// That includes three edges to be adopted in the final model.
// I. + II.: between the patient and opTime and between patient and capacity -> Selects a day and OT for the patient
// III.: between opTime and Capacity to make sure the predefined surgeon of the patient is working in the correct OT on that day
rule selectOperationDay {
	p : Patient {
		- firstWorkload -> w
		- surgeon -> s
	}
	
	s : Surgeon {
		- opTimes -> opTime
	}
	
	opTime : OpTime
	
	w : Workload {
		- virtualCapacity -> vwc
		- virtualOpTime -> vwop
	}
	
	vwc : VirtualWorkloadToCapacity {
		- requires_virtualWorkloadToOpTime -> vwop
		.isSelected := true
	}
	
	vwop : VirtualWorkloadToOpTime {
		- requires_virtualOpTimeToCapacity -> vopc
		- enables_virtual_WorkloadToCapacity -> vwc
		.isSelected := true
		- opTime -> opTime
	}
	
	vopc : VirtualOpTimeToCapacity {
		- enables_virtualWorkloadToOpTime -> vwop
		.isSelected := true
	}
	
}

// Rule that selects an  VirtualShiftToRoster-Node to be adopted in the final model. 
rule selectShiftToRoster {

	vsr : VirtualShiftToRoster {
		.isSelected := true
	}
}

//
// Utility Patterns used in Constraints
//

// Pattern to find all mandatory patients
pattern mandatoryPatients {
	p : Patient
	
	# p.mandatory == true
	# p.isOccupant == false
}

// Pattern to find all optional patients
pattern optionalPatients {
	p : Patient
	
	# p.mandatory == false
	# p.isOccupant == false
}

rule virtualNodesForOccupant {

	vsw : VirtualShiftToWorkload {
		.isSelected := true
	}
	# vsw.wasImported == true
}

// Pattern to Count the Patients over a specific room for a specific day -> enforce that the capacity of a room is not exceeded
// Needs to be checked for each morning shift (s.shiftNo % 3 == 0) -> remaining shifts of each day are automatically covered
pattern roomForShift{
	r : Room {
		- shifts -> s
	}
	
	s : Shift
}

// Pattern that finds all patients that are assigned to a room -> first and following workloads
pattern patientForRoom {
	p : Patient

	s : Shift 
	
	r : Room {
		- shifts -> s
	}
}

pattern otCapacityTupel{
	ot : OT {
		- capacities -> c
	}
	
	c : Capacity 
//	# c.maxCapacity > 0
}

pattern surgeonOptimeTupel {
	s : Surgeon {
		- opTimes -> op
	}
	
	op : OpTime
//	# op.maxOpTime > 0
}

pattern genderRoomShift {
	g : Gender 
	
	r : Room {
		- shifts -> s
	}
	
	s : Shift
}

pattern nurseRosterTupel {
	n : Nurse {
		- rosters -> ro
	}
	
	ro : Roster
}

pattern surgeonOTForDay {
	s : Surgeon {
		- opTimes -> op
	}
	
	op : OpTime 
	
	ot : OT
}

//
// GIPSL 
//

//
// Mappings
//

// Decides in which room a patient is admitted -> Connects the first workload to a shift
mapping selectedShiftToFirstWorkload to selectShiftToFirstWorkload;

// Decides which following shifts are assigned to a patient (dependent on the room that was assigned to the first workload) 
// -> Connects all following workloads to a shift (The room is always the same and equal to the one selected in selectedShiftToFirstWorkload)
mapping selectedExtendingShiftToFirstWorkload to selectExtendingShiftToFirstWorkload;

// Decides on what day and in which OT a patient is operated on.
mapping selectedOperationDay to selectOperationDay;

// Decides which nurses are assigned to a shift/room on a specific day.
mapping selectedShiftToRoster to selectShiftToRoster;

// Adds all imported Virtual Nodes of Occupants to the model
mapping selectedOccupantNodes to virtualNodesForOccupant;

// 
// Utility Mappings
//

// Mapping that holds the information how many patients are assigned to a room on a specific day
mapping countPatientsForRoom to roomForShift {
	var patientCount : EInt
};

// Mapping for all assigned patients. (occupants and new patients for each workload (first + following))
mapping assignedPatientsToRoom to patientForRoom;
 
// Mapping that holds the information if a specific gender is assigned to a room on a specific day. 
mapping assignedGenderToRoomOnShift to genderRoomShift;

// mapping that decides which ots are open on a specific day
mapping openOTs to otCapacityTupel;

// mapping that holds the information if a surgeon operates in a specific ot on a specific day
mapping otForSurgeon to surgeonOTForDay;

// mapping that counts how many ots a surgeon is assigned to on a specific day.
mapping otsPerSurgeon to surgeonOptimeTupel{
	var otCount : EInt
	var penalizedOTs : EInt
};

//
// Hard Constraints
//

// H1: No gender mix: Patients of different genders may not share a room on any day. 
// patient.gender is a string variable and the preallocation is assumably not known. -> There can only be the same value for all patients
constraint with roomForShift {
	mappings.assignedGenderToRoomOnShift->filter( 
		 element.nodes.r == context.nodes.r &
		element.nodes.s == context.nodes.s
	)->sum(element.value) <= 1
}

// H2: Compatible rooms: Patients can only be assigned to one of their compatible rooms.
// -> Already enforced by GT-Rule "assignPatientToRoom" in preprocessing

// H3: Surgeon overtime: The maximum daily surgery time of a surgeon must not be exceeded. 
constraint with surgeonOptimeTupel {
	mappings.selectedOperationDay->filter(
		element.nodes.vwop.opTime == context.nodes.op &
		element.nodes.p.surgeon == context.nodes.s
	)->sum(element.nodes.p.surgeryDuration * element.value)
	<=
	context.nodes.op.maxOpTime
}

// H4: OT overtime: The duration of all surgeries allocated to an OT on a day must not exceed 
// its maximum capacity.
constraint with otCapacityTupel {
	mappings.selectedOperationDay->filter(
		element.nodes.vopc.capacity.day == context.nodes.c.day &
		element.nodes.vwc.capacity.ot == context.nodes.ot
	)->sum(element.nodes.p.surgeryDuration * element.value)
	<= 
	context.nodes.c.maxCapacity
}

// H5: Mandatory versus optional patients: All mandatory patients must be admitted within the 
// scheduling period, whereas optional patients may be postponed to future scheduling periods.
// The addition only works because other constraints enforce that the individual sums have to be <= 1
constraint with mandatoryPatients {
	mappings.selectedShiftToFirstWorkload->filter(element.nodes.p == context.nodes.p)->sum(element.value)
	+
	mappings.selectedOperationDay->filter(element.nodes.p == context.nodes.p)->sum(element.value)
	== 2
}

// H6: Admission day: A patient can be admitted on any day from their release date to their
// due date.
// -> Already enforced by GT-Rule "fixOperationday"

// H7 Room capacity: The number of patients in each room in each day cannot exceed the 
// capacity of the room.
// The calculated amount of Patients assigned to each room on each morning shift of a day has to be 
// smaller or equal to the amount of available beds.

constraint with countPatientsForRoom {
	 context.variables.patientCount <= context.nodes.r.beds
}

//
// General Constraints
//

// C1: A patient is assigned to the same room during all shifts
// -> Already enforced by GT-Rule "extendPatientStay" in preprocessing

// C2: A patient is assigned to at most one room in each shift
// -> Already implemented in Constraint V3 in context with C9

// C3: Nurses are not assigned to empty rooms and 

constraint with countPatientsForRoom {	
	mappings.selectedShiftToRoster->filter(
	    element.nodes.vsr.shift.room == context.nodes.r &
	    element.nodes.vsr.shift.shiftNo == context.nodes.s.shiftNo
		)->sum(element.value)
	<= 
	context.variables.patientCount * 1000
	&
	context.variables.patientCount 
	<= 
	mappings.selectedShiftToRoster->filter(
	  element.nodes.vsr.shift.room == context.nodes.r &
	  element.nodes.vsr.shift.shiftNo == context.nodes.s.shiftNo
	)->sum(element.value) * 1000
	
//	Transformed version of the following boolean equivalence   
//	context.variables.patientCount == 0
//	<=> 
//	mappings.selectedShiftToRoster->filter(
//	    element.nodes.vsr.shift.room == context.nodes.r &
//	    element.nodes.vsr.shift.shiftNo == context.nodes.s.shiftNo
//	  )->sum(element.value) == 0
}

// C4: Each nonempty room in each shift is assigned to one nurse

constraint with countPatientsForRoom {
	context.variables.patientCount
	<=
	mappings.selectedShiftToRoster->filter(
	    element.nodes.vsr.shift.room == context.nodes.r &
	    element.nodes.vsr.shift.shiftNo == context.nodes.s.shiftNo
	  )->sum(element.value)
	* 1000
	&
	mappings.selectedShiftToRoster->filter(
	    element.nodes.vsr.shift.room == context.nodes.r &
	    element.nodes.vsr.shift.shiftNo == context.nodes.s.shiftNo
	  )->sum(element.value) <= 1
	&
	mappings.selectedShiftToRoster->filter(
	    element.nodes.vsr.shift.room == context.nodes.r &
    	element.nodes.vsr.shift.shiftNo == context.nodes.s.shiftNo
  	)->sum(element.value)
  	<= 
  	context.variables.patientCount * 1000 
//	Transformed version of the following boolean equivalence   
//	context.variables.patientCount >= 1
//	<=> 
//	mappings.selectedShiftToRoster->filter(
//	    element.nodes.vsr.shift.room == context.nodes.r &
//	    element.nodes.vsr.shift.shiftNo == context.nodes.s.shiftNo
//	  )->sum(element.value) == 1
}

// C5: A patient is assigned to at most one operating time slot

constraint with Patient {
	mappings.selectedOperationDay->filter(element.nodes.p == context)->sum(element.value) <= 1
}

// C6: A surgeon without any operations on a specific day is not assigned an operating theater on that day
// -> Already given, because the rule selectOperationDay only assigns a surgeon to an OT if he has a scheduled
// operation with a patient on that day

// C7: The day the first workload of a patient gets scheduled has to be the same day the patient has surgery
// -> Already enforced by Constraint V2

// C8: If a patient is admitted all his workloads have to be scheduled in a shift
// -> Already implemented in Constraint V3

// C9: A patient can´t be assigned to more than one "first" shift
constraint with Patient {
	mappings.selectedShiftToFirstWorkload->filter(element.nodes.p == context)->sum(element.value) <= 1
}

//
// "Virtual" Constraints
//

// V1: All virtual nodes of occupants are selected
constraint with selectedOccupantNodes {
	context.value == 1
}

// V2: The virtual Node "VirtualWorkloadToShift" can only be added to the final model if
// the required Node "VirtualWorkloadToCapacity" is also selected (isSelected = true) 
constraint with selectShiftToFirstWorkload {
	mappings.selectedShiftToFirstWorkload->filter(
		element.nodes.vsw == context.nodes.vsw &
		element.nodes.vwc == context.nodes.vwc
	)->sum(element.value)
	<=
	mappings.selectedOperationDay->filter(
		element.nodes.p == context.nodes.p &
		element.nodes.vwc == context.nodes.vwc &
		element.nodes.vopc.capacity.day == context.nodes.vsw.shift.shiftNo / 3 
	)->sum(element.value)
}

constraint with selectedOperationDay {
	mappings.selectedOperationDay->filter(
		element.nodes.vwc == context.nodes.vwc &
		element.nodes.vopc == context.nodes.vopc &
		element.nodes.vwop == context.nodes.vwop
	)->sum(element.value)
	<=
	mappings.selectedShiftToFirstWorkload->filter(
		element.nodes.vwc == context.nodes.vwc &
		element.nodes.vsw.shift.shiftNo / 3 == context.nodes.vopc.capacity.day
	)->sum(element.value)
}
	
// V3: The stay of a patient can be extended by selecting a following Node "VirtualWorkloadToShift" 
// that is connected to the previous links between the patients workloads to shifts.
// The following node can only be selected if the previous is already set to true

constraint with selectExtendingShiftToFirstWorkload{
	mappings.selectedExtendingShiftToFirstWorkload->filter(
		element.nodes.prevvsw == context.nodes.prevvsw &
		element.nodes.nextvsw == context.nodes.nextvsw 
	)->sum(element.value)
	<=
	mappings.selectedExtendingShiftToFirstWorkload->filter(
		element.nodes.nextvsw == context.nodes.prevvsw 
	)->sum(element.value)
	+
	mappings.selectedShiftToFirstWorkload->filter(
		element.nodes.vsw == context.nodes.prevvsw 
	)->sum(element.value)
	
	&
	
	mappings.selectedExtendingShiftToFirstWorkload->filter(
		element.nodes.nextvsw == context.nodes.prevvsw 
	)->sum(element.value)
	+
	mappings.selectedShiftToFirstWorkload->filter(
		element.nodes.vsw == context.nodes.prevvsw 
	)->sum(element.value)
	<= 
	mappings.selectedExtendingShiftToFirstWorkload->filter(
		element.nodes.prevvsw == context.nodes.prevvsw &
		element.nodes.nextvsw == context.nodes.nextvsw 
	)->sum(element.value) * 2
	
//	Transformed version of the following boolean implication 	
//	mappings.selectedExtendingShiftToFirstWorkload->filter(
//		element.nodes.prevvsw == context.nodes.prevvsw &
//		element.nodes.nextvsw == context.nodes.nextvsw 
//	)->sum(element.value) == 1
//	=>
//	mappings.selectedExtendingShiftToFirstWorkload->filter(
//		element.nodes.nextvsw == context.nodes.prevvsw 
//	)->sum(element.value) == 1
//	|
//	mappings.selectedShiftToFirstWorkload->filter(
//		element.nodes.vsw == context.nodes.prevvsw 
//	)->sum(element.value) == 1
}

//
// Utility constraints
//

// U1: Sets the mapping variable to 1 if a patient is assigned to a specific room for a specific day
// This occurs if one of the following criteria is met: They are mutually exclusive
// 1. The patient is assigned to a room (First workload) -> selectedShiftToFirstWorkload
// 2. The patients stay is extended. The room does not change -> selectedExtendingShiftToFirstWorkload
// 3. The patient is an occupant -> All his virtual Nodes are selected -> selectedOccupantNodes
// The amount of matches can be reduced by only checking for the morning shifts
constraint with assignedPatientsToRoom {
	mappings.selectedShiftToFirstWorkload->filter(
		element.nodes.p == context.nodes.p &
		element.nodes.vsw.shift.room == context.nodes.r &
		element.nodes.vsw.shift == context.nodes.s
	)->sum(element.value)
	+
	mappings.selectedExtendingShiftToFirstWorkload->filter(
		element.nodes.prevvsw.workload.patient == context.nodes.p &
		element.nodes.prevvsw.shift.room == context.nodes.r &
		element.nodes.nextvsw.shift == context.nodes.s
	)->sum(element.value)
	+
	mappings.selectedOccupantNodes->filter(
		element.nodes.vsw.workload.patient == context.nodes.p &
		element.nodes.vsw.shift.room == context.nodes.r &
		element.nodes.vsw.shift == context.nodes.s
	)->sum(element.value)
	<=
	context.value * 1000
	
	&
	
	context.value
	<=
		mappings.selectedShiftToFirstWorkload->filter(
		element.nodes.p == context.nodes.p &
		element.nodes.vsw.shift.room == context.nodes.r &
		element.nodes.vsw.shift == context.nodes.s
	)->sum(element.value)
	+
	mappings.selectedExtendingShiftToFirstWorkload->filter(
		element.nodes.prevvsw.workload.patient == context.nodes.p &
		element.nodes.prevvsw.shift.room == context.nodes.r &
		element.nodes.nextvsw.shift == context.nodes.s
	)->sum(element.value)
	+
	mappings.selectedOccupantNodes->filter(
		element.nodes.vsw.workload.patient == context.nodes.p &
		element.nodes.vsw.shift.room == context.nodes.r &
		element.nodes.vsw.shift == context.nodes.s
	)->sum(element.value)
	
//	Transformed version of the following boolean equivalence 
//	[
//	mappings.selectedShiftToFirstWorkload->filter(
//		element.nodes.p == context.nodes.p &
//		element.nodes.vsw.shift.room == context.nodes.r &
//		element.nodes.vsw.shift == context.nodes.s
//	)->sum(element.value) == 1
//	|
//	mappings.selectedExtendingShiftToFirstWorkload->filter(
//		element.nodes.prevvsw.workload.patient == context.nodes.p &
//		element.nodes.prevvsw.shift.room == context.nodes.r &
//		element.nodes.nextvsw.shift == context.nodes.s
//	)->sum(element.value) == 1
//	|
//	mappings.selectedOccupantNodes->filter(
//		element.nodes.vsw.workload.patient == context.nodes.p &
//		element.nodes.vsw.shift.room == context.nodes.r &
//		element.nodes.vsw.shift == context.nodes.s
//	)->sum(element.value) == 1
//	]
//	<=>
//	context.value == 1
}

// U2: Utility Constraint that counts how many patients are currently assigned to each room 
constraint with countPatientsForRoom {
	context.variables.patientCount 
	==
	mappings.assignedPatientsToRoom->filter(
		element.nodes.r == context.nodes.r &
		element.nodes.s.shiftNo == context.nodes.s.shiftNo
	)->sum(element.value)  
}

// U3: Utility Constraint that saves the information if a gender is assigned to a room on a specific day. 
constraint with assignedGenderToRoomOnShift {
	context.value
	<=
	mappings.assignedPatientsToRoom->filter(
		element.nodes.p.gender == context.nodes.g.name &
		element.nodes.s == context.nodes.s &
		element.nodes.r == context.nodes.r
	)->sum(element.value)
	
	& 
	
	mappings.assignedPatientsToRoom->filter(
		element.nodes.p.gender == context.nodes.g.name &
		element.nodes.s == context.nodes.s &
		element.nodes.r == context.nodes.r
	)->sum(element.value)
	<= 
	context.value * 1000
	
//	Transformed version of the following boolean equivalence 
//	mappings.assignedPatientsToRoom->filter(
//		element.nodes.p.gender == context.nodes.g.name &
//		element.nodes.s == context.nodes.s &
//		element.nodes.r == context.nodes.r
//	)->sum(element.value) >= 1
//	<=>
//	context.value == 1
}

// U4: sets the mapping to true if there is at least one surgery assigned to the ot on that day
constraint with openOTs {
	mappings.selectedOperationDay->filter(
		element.nodes.vwc.capacity.ot == context.nodes.ot &
		element.nodes.vwc.capacity.day == context.nodes.c.day
	)->sum(element.value)	
	<= 
	context.value * 1000
}

// U5: sets the mapping to true if the surgeon operates in the ot on that day
constraint with otForSurgeon {
	mappings.selectedOperationDay->filter(
		element.nodes.s == context.nodes.s &
		element.nodes.opTime == context.nodes.op &
		element.nodes.vwc.capacity.ot == context.nodes.ot
	)->sum(element.value)
	<=
	context.value * 1000
	
	&

	context.value
	<=
	mappings.selectedOperationDay->filter(
		element.nodes.s == context.nodes.s &
		element.nodes.opTime == context.nodes.op &
		element.nodes.vwc.capacity.ot == context.nodes.ot
	)->sum(element.value)
}

// U6: counts the ots per surgeon for each day
constraint with otsPerSurgeon {
	context.variables.otCount
	==
	mappings.otForSurgeon->filter(
		element.nodes.op == context.nodes.op &
		element.nodes.s == context.nodes.s
	)->sum(element.value)
}

// U7: calculates max(0, otCount) for each surgeon on each day
constraint with otsPerSurgeon {
	context.variables.penalizedOTs >= (context.variables.otCount - 1) &
	context.variables.penalizedOTs >= 0
}

//
// Objectives
//

//// S1: The maximum difference of age groups in one room for each day should be minimized

//// TODO: Implement

// S2: The nurse assigned to a room must have the minimum skill level required by patients in this room
//function calculateUnqualifiedNurses with assignedPatientsToRoom {
//	// TODO: check value = 1
//	mappings.selectedShiftToRoster->filter(
//		element.nodes.vsr.shift.room == context.nodes.r &
//		element.nodes.vsr.shift.shiftNo == context.nodes.s.shiftNo &
//		element.nodes.vsr.roster.nurse.skillLevel < context.nodes.w.minNurseSkill //  .workload.minNurseSkill
//	)->sum(element.value) 
//
//}

// S3: The number of nurses taking care of a specific patient must be minimized

// TODO: Implement 

// S4: The workload of a nurse should not exceed the assigned maximum workload
//function calculateNurseWorkload with nurseRosterTupel {
//	mappings.selectedShiftToRoster->filter(
//		element.nodes.vsr.roster == context.nodes.ro
//	)->sum(element.value ) // * element.nodes.vsr.shift.
//	-
//	context.nodes.ro.maxWorkload
//}
// Irgendwie an Workload dran kommen, evtl. über assignedPatients aufsummieren? 

// S5: The number of OTs opened on each day should be minimized
function calculateOPenOTs with Day {
	mappings.openOTs->filter(element.nodes.c.day == context.number)->sum(element.value) 
}

// S6: The number of different OTs a surgeon is assigned to per working day should be minimized
function calculateOtsPerSurgeon with otsPerSurgeon {
	context.variables.penalizedOTs
}

// S7: The number of days between a patient´s release date and their actual date of admission should be minimized
function calculateWaitTime with selectedShiftToFirstWorkload {
	((context.nodes.vsw.shift.shiftNo / 3) - context.nodes.p.earliestDay) * context.value
}

// S8: The number of not admitted optional patients should be minimized
function calculateNotAssignedOptionalPatients with optionalPatients {
	1 - mappings.selectedShiftToFirstWorkload->filter(element.nodes.p == context.nodes.p)->sum(element.value)
}

objective : min {
	0
	// S1
//	+ functions.calculateUnqualifiedNurses * types.Weight->sum(element.roomNurseSkill)
	// S3
	// S4
	+ functions.calculateOPenOTs * types.Weight->sum(element.openOperatingTheater)
	+ functions.calculateOtsPerSurgeon * types.Weight->sum(element.surgeonTransfer)
	+ functions.calculateWaitTime * types.Weight->sum(element.patientDelay)
	+ functions.calculateNotAssignedOptionalPatients * types.Weight->sum(element.unscheduledOptional)
}