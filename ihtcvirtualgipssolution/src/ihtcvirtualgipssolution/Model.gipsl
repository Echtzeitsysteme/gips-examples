package "ihtcvirtualgipssolution"
import "platform:/resource/ihtcvirtualmetamodel/model/Ihtcvirtualmetamodel.ecore"

config {  
	solver := GUROBI;
	timeLimit := true [value := 30.0];
	randomSeed := true [value := 0];
	presolve := true;
	debugOutput := true;
}

//
// GT
//

// (Utility) pattern to find already assigned surgeon OPs.
pattern surgeonOpIsAssigned {
	root : Root {
		- surgeons -> surgeon
		- ots -> o
	}
	
	surgeon : Surgeon {
		- opTimes -> op
	}
	
	op : OpTime {
		- derivedCapacities -> c
	}

	o : OT {
		- capacities -> c
	}
	
	c : Capacity
	
	# op.day == c.day
}
condition surgeonOpIsNotAssigned = forbid surgeonOpIsAssigned

// GT rule to assign a surgeon to an operation time.
rule assignSurgeonToOt {
	root : Root {
		- surgeons -> surgeon
		- ots -> o
	}
	
	surgeon : Surgeon {
		- opTimes -> op
	}
	
	op : OpTime {
		++ - derivedCapacities -> c
	}

	o : OT {
		- capacities -> c
	}
	
	c : Capacity
	
	# op.day == c.day
}
when surgeonOpIsNotAssigned

// Pattern that finds Patients which are assigned to a Room. 
// Used in assignPatientToRoom to count the Patients in a specific room
// Needs to Count over different links depending if the pre-existing links are changed to virtual nodes or not 
pattern findPatientsInRoom {
	root : Root {
		- patients -> patient
		- virtualShiftToWorkload -> virtualWorkload
	}
	
	patient : Patient {
		- firstWorkload -> workload
	}
	
	workload : Workload {
//		- derivedShift -> shift
		- virtualShift -> virtualWorkload
	}
	
	virtualWorkload : VirtualShiftToWorkload {
		- shift -> s
	}
	
	s : Shift {
		- room -> r
	}
	
	r : Room
	
	# virtualWorkload.wasImported == true 
}

pattern patientOperationDayIsAssigned {
	root : Root {
		- patients -> p
		- surgeons -> s
	}
	
	p : Patient {
		- firstWorkload -> w
		- surgeon -> s
	}
	
	w : Workload {
		- derivedOpTimes -> op
		- derivedCapacity -> c
	}
	
	s : Surgeon {
		- opTimes -> op
	}
	
	op : OpTime {
		- derivedCapacities -> c
	}
	
	c : Capacity
	
	# p.earliestDay <= op.day 
	# op.day <= p.dueDay
	# p.surgeryDuration <= op.maxOpTime
	# p.surgeryDuration <= c.maxCapacity
}
condition patientOperationDayIsnotAssigned = forbid patientOperationDayIsAssigned

// Rule that assigns a specific Operation Day to a Patient TODO: implement virtual
rule fixOperationday {
	root : Root {
		- patients -> p
		- surgeons -> s
	}
	
	p : Patient {
		- firstWorkload -> w
		- surgeon -> s
	}
	
	w : Workload {
		++ - derivedOpTimes -> op
		++ - derivedCapacity -> c
	}
	
	s : Surgeon {
		- opTimes -> op
	}
	
	op : OpTime {
		- derivedCapacities -> c

	}
	
	c : Capacity
	
	# p.earliestDay <= op.day 
	# op.day <= p.dueDay
	# p.surgeryDuration <= op.maxOpTime
	# p.surgeryDuration <= c.maxCapacity
}
when patientOperationDayIsnotAssigned


//
// GIPSL 
//

mapping assignSurgeonMapping to assignSurgeonToOt;
