package "refactoringsoftwaresystemtgg3"
import "platform:/resource/SoftwareSystem/model/softwareSystem.ecore"

config {
	solver := GUROBI;
	timeLimit := true [value := 120.0];
	randomSeed := true [value := 0];
	presolve := auto;
	debugOutput := true;
	tolerance := true [value := 0.00001];
}

// condition also excludes the other way around
condition componentTupleNoImport = forbid findImportTuple && forbid findImportTupleRev

pattern findImportTuple {
	c1: Component {
		-imports -> c2
	}

	c2: Component
}

pattern findImportTupleRev {
	c1: Component

	c2: Component {
		-imports -> c1
	}
}

pattern findImportTriple {
	c1: Component {
		-imports -> c2
	}

	c2: Component

	s: System
}

pattern findPrevEmbeddingTuple {
	c: Component

	s: System {
		-components -> c
	}
}

rule embedCSTuple {
	c: Component

	snew: System {
		++ -components -> c
	}
// the old edge will implicitly be removed because a node can only be contained once
// activating this expression below will break the functionality to honor
// pre-existing mappings because there can be no match with the same `snew` and `sold`
// hence, when activated, every component must be moved
// sold : System {
// -- - components -> c
// }
}

pattern findSingleComponent {
	c: Component
}

pattern findNonImportTriple {
	c1: Component

	c2: Component

	s: System
}
when componentTupleNoImport

mapping embed to embedCSTuple;

// iii) every component must be embedded
constraint with findSingleComponent {
	mappings.embed->filter(element.nodes.c == context.nodes.c)->sum(element.value) == 1
}

// i) variables for non-existing violations
mapping vari to findImportTriple;

// connect vari mapping with the respective c1 and c2 mappings
constraint with findImportTriple {
	// workaround for == in <=> constraints
	mappings.vari->filter(element.nodes.c1 == context.nodes.c1 & element.nodes.c2 == context.nodes.c2 & element.nodes.s == context.nodes.s)->sum(element.value) >= 1
	<=>
	[
		mappings.embed->filter(element.nodes.c == context.nodes.c1 & element.nodes.snew == context.nodes.s)->sum(element.value) >= 1
		&
		mappings.embed->filter(element.nodes.c == context.nodes.c2 & element.nodes.snew == context.nodes.s)->sum(element.value) >= 1
	]
// TODO: reformulate this with a more efficient constraint
}

// ii) variables for existing violations
mapping varii to findNonImportTriple;

// connect varii mapping with the respective c1 and c2 mappings
constraint with findNonImportTriple {
	// workaround for == in <=> constraints
	mappings.varii->filter(element.nodes.c1 == context.nodes.c1 & element.nodes.c2 == context.nodes.c2 & element.nodes.s == context.nodes.s)->sum(element.value) >= 1
	<=>
	[
		mappings.embed->filter(element.nodes.c == context.nodes.c1 & element.nodes.snew == context.nodes.s)->sum(element.value) >= 1
		&
		mappings.embed->filter(element.nodes.c == context.nodes.c2 & element.nodes.snew == context.nodes.s)->sum(element.value) >= 1
	]
// TODO: reformulate this with a more efficient constraint
}

function oi with vari {
	1 * context.value
}

function oii with varii {
	1 * context.value
}

// iv) motivate the solver to chose the same embedding as before
function oiii with findPrevEmbeddingTuple {
	mappings.embed->filter(element.nodes.c == context.nodes.c & element.nodes.snew == context.nodes.s)->sum(element.value)
}

objective : max {
	functions.oi
	- functions.oii
	+ 0.001 * functions.oiii
}
