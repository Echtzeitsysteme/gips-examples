package "org.emoflon.gips.gipsl.examples.mdvne.seq"
import "platform:/resource/network.model/model/Model.ecore"

config {  
	solver := GUROBI [home:="fu", license:="bar"];
	launchConfig := true [main := "org.emoflon.gips.gipsl.examples.mdvne.seq.ExampleMdVNESeq"];
	timeLimit := true [value := 120.0];
	randomSeed := true [value := 0];
	presolve := true;
	debugOutput := true;
	tolerance := true [value := 0.00001];
}

// NACS
condition serverNotMapped = forbid serverIsMapped
pattern serverIsMapped {
	host: SubstrateServer
	
	virtualNode: VirtualServer {
		-host -> host
	}
}

condition switchNotMapped = forbid switchIsMapped
pattern switchIsMapped {
	host: SubstrateNode
	
	virtualSwitch: VirtualSwitch {
		-host -> host
	}
}

condition linkNotMapped = forbid linkIsMapped
pattern linkIsMapped {
	host: SubstrateHostLink
	
	virtualLink: VirtualLink {
		-host -> host
	}
}

condition networkNotMapped = forbid networkIsMapped && forbid networkIsMappedSrv
pattern networkIsMapped {
	host: SubstrateNetwork
	
	virtualNetwork: VirtualNetwork {
		-host -> host
	}
}
pattern networkIsMappedSrv {
	host: SubstrateServer
	
	virtualNetwork: VirtualNetwork {
		-hostServer -> host
	}
}

// Patterns for finding non embedded virtual elements
pattern vsrvNotMapped {
	virtualServer: VirtualServer
}
when serverNotMapped

pattern vswNotMapped {
	virtualSwitch: VirtualSwitch
}
when switchNotMapped

pattern vlNotMapped {
	virtualLink: VirtualLink
}
when linkNotMapped

// Actual rules
rule serverMatchPositive {
	root: Root {
		-networks -> substrateNetwork
		-networks -> virtualNetwork
	}
	
	substrateServer: SubstrateServer {
		.residualCpu := substrateServer.residualCpu - virtualNode.cpu
		.residualMemory := substrateServer.residualMemory - virtualNode.memory
		.residualStorage := substrateServer.residualStorage - virtualNode.storage
	}
	
	virtualNode: VirtualServer {
		++ -host -> substrateServer
	}
	
	substrateNetwork: SubstrateNetwork {
		-nodes -> substrateServer
	}
	
	virtualNetwork: VirtualNetwork {
		-nodes -> virtualNode
	}
	
	# virtualNode.cpu <= substrateServer.residualCpu
	# virtualNode.memory <= substrateServer.residualMemory
	# virtualNode.storage <= substrateServer.residualStorage
}
when serverNotMapped

rule switchNodeMatchPositive {
	root: Root {
		-networks -> substrateNetwork
		-networks -> virtualNetwork
	}
	
	substrateNode: SubstrateNode
	
	virtualSwitch : VirtualSwitch {
		++ -host -> substrateNode
	}
	
	substrateNetwork: SubstrateNetwork {
		-nodes -> substrateNode
	}
	
	virtualNetwork: VirtualNetwork {
		-nodes -> virtualSwitch
	}
}
when switchNotMapped

rule linkPathMatchPositive {
	root: Root {
		-networks -> substrateNetwork
		-networks -> virtualNetwork
	}
	
	substratePath: SubstratePath {
		.residualBandwidth := substratePath.residualBandwidth - virtualLink.bandwidth
		
		// Update all substrate links
		forEach links->l {
			iterator::l.residualBandwidth := iterator::l.residualBandwidth - virtualLink.bandwidth
		}
	}
	
	virtualLink: VirtualLink {
		++ -host -> substratePath
	}
	
	substrateNetwork: SubstrateNetwork {
		-paths -> substratePath
	}
	
	virtualNetwork: VirtualNetwork {
		-links -> virtualLink
	}
	
	# virtualLink.bandwidth <= substratePath.residualBandwidth
	
	// Explicitly exclude substrate paths with a residual bandwidth equals to 0
	# substratePath.residualBandwidth > 0
}
when linkNotMapped

rule linkServerMatchPositive {
	root: Root {
		-networks -> substrateNetwork
		-networks -> virtualNetwork
	}
	
	substrateServer: SubstrateServer
	
	virtualLink: VirtualLink {
		++ -host -> substrateServer
	}
	
	substrateNetwork: SubstrateNetwork {
		-nodes -> substrateServer
	}
	
	virtualNetwork: VirtualNetwork {
		-links -> virtualLink
	}
}
when linkNotMapped

rule networkRule {
	root: Root {
		-networks -> substrateNetwork
		-networks -> virtualNetwork
	}
	
	substrateNetwork: SubstrateNetwork
	
	virtualNetwork: VirtualNetwork {
		++ -host -> substrateNetwork
	}
}
when networkNotMapped

//
// GIPSL starts here!
//

// Server 2 Server
mapping srv2srv with serverMatchPositive {
	var index : EInt
};

constraint -> pattern::vsrvNotMapped {
	mappings.srv2srv->filter(m | m.nodes().virtualNode == self.nodes().virtualServer)->sum(m | m.value()) == 1
}

constraint -> mapping::srv2srv {
	[self.value() >= 1] <=> [self.variables().index >= 1]
}

// Switch 2 Node
mapping sw2node with switchNodeMatchPositive{
	var index : EInt
};

constraint -> pattern::vswNotMapped {
	mappings.sw2node->filter(m | m.nodes().virtualSwitch == self.nodes().virtualSwitch)->sum(m | m.value()) == 1
}

constraint -> mapping::sw2node {
	[self.value() >= 1] <=> [self.variables().index >= 1]
}

// Link 2 Server
mapping l2s with linkServerMatchPositive {
	var index : EInt
};

//constraint -> pattern::linkServerMatchPositive {
//	(mappings.srv2srv->filter(mpp | mpp.nodes().virtualNode == self.nodes().virtualLink.source & mpp.nodes().substrateServer == self.nodes().substrateServer)->sum(m | m.value()) +
//		mappings.sw2node->filter(mpp | mpp.nodes().virtualSwitch == self.nodes().virtualLink.source & mpp.nodes().substrateNode == self.nodes().substrateServer)->sum(m | m.value())) +
//	(mappings.srv2srv->filter(mpp | mpp.nodes().virtualNode == self.nodes().virtualLink.target & mpp.nodes().substrateServer == self.nodes().substrateServer)->sum(m | m.value()) +
//		mappings.sw2node->filter(mpp | mpp.nodes().virtualSwitch == self.nodes().virtualLink.target & mpp.nodes().substrateNode == self.nodes().substrateServer)->sum(m | m.value()))
//	>= 2 * mappings.l2s->filter(mpp | mpp.nodes().substrateServer == self.nodes().substrateServer & mpp.nodes().virtualLink == self.nodes().virtualLink)->sum(m | m.value())
//}

constraint -> pattern::vlNotMapped {
	mappings.l2s->filter(m | m.nodes().virtualLink == self.nodes().virtualLink)->sum(m | m.value()) == 1
}

constraint -> mapping::l2s {
	[self.value() >= 1] <=> [self.variables().index >= 1]
}

// Connect link to node mappings via the index variable
constraint -> pattern::linkServerMatchPositive {
	mappings.l2s->filter(m | m.nodes().virtualLink == self.nodes().virtualLink & m.nodes().substrateServer == self.nodes().substrateServer)->sum(m | m.variables().index)
	>=
	mappings.srv2srv->filter(m | m.nodes().virtualNode == self.nodes().virtualLink.source)->sum(m | m.variables().index)
	+ 1
	
	&
	
	mappings.l2s->filter(m | m.nodes().virtualLink == self.nodes().virtualLink & m.nodes().substrateServer == self.nodes().substrateServer)->sum(m | m.variables().index)
	>=
	mappings.sw2node->filter(m | m.nodes().virtualSwitch == self.nodes().virtualLink.target)->sum(m | m.variables().index)
	+ 1
}

//// Link 2 Path
//mapping l2p with linkPathMatchPositive {
//	var index : EInt
//};
//
//constraint -> pattern::vlNotMapped {
//	mappings.l2s->filter(m | m.nodes().virtualLink == self.nodes().virtualLink)->sum(m | m.value()) +
//	mappings.l2p->filter(m | m.nodes().virtualLink == self.nodes().virtualLink)->sum(m | m.value())
//	== 1
//}
//
//constraint -> mapping::l2p {
//	self.value() >= 0 + 0.001 => self.variables().index >= 0 + 0.001
//}
//
//constraint -> pattern::linkPathMatchPositive {
//	mappings.l2p->filter(m | m.nodes().virtualLink == self.nodes().virtualLink & m.nodes().substratePath== self.nodes().substratePath)->sum(m | m.variables().index)
//	>=
//	mappings.srv2srv->filter(m | m.nodes().virtualNode == self.nodes().virtualLink.source)->sum(m | m.variables().index)
//	+ 0.001
//	
//	&
//	
//	mappings.l2p->filter(m | m.nodes().virtualLink == self.nodes().virtualLink & m.nodes().substratePath == self.nodes().substratePath)->sum(m | m.variables().index)
//	>=
//	mappings.sw2node->filter(m | m.nodes().virtualSwitch == self.nodes().virtualLink.target)->sum(m | m.variables().index)
//	+ 0.001
//}

//// TODO: There must be no duplicate index variable value
//constraint -> mapping::srv2srv {
//	mappings.srv2srv->filter(m | m.variables().index == self.variables().index)->count() == 1
//}

// Embed the virtual network
mapping net2net with networkRule {
	var index : EInt
};

constraint -> pattern::networkRule {
	mappings.net2net->filter(m | m.nodes().virtualNetwork == self.nodes().virtualNetwork)->sum(m | m.value()) == 1
}

constraint -> mapping::net2net {
	[self.value() >= 1] <=> [self.variables().index >= 1]
}

//constraint -> pattern::networkRule {
//	mappings.l2p->filter(l | l.nodes().virtualNetwork == self.nodes().virtualNetwork)->sum(m | m.value())
//	+ mappings.l2s->filter(l | l.nodes().virtualNetwork == self.nodes().virtualNetwork)->sum(m | m.value())
//	== self.nodes().virtualNetwork.links->count()
//}
constraint -> pattern::vlNotMapped {
	mappings.net2net->filter(m | m.nodes().virtualNetwork == self.nodes().virtualLink.network)->sum(m | m.variables().index)
	>=
	mappings.l2s->filter(m | m.nodes().virtualLink == self.nodes().virtualLink)->sum(m | m.variables().index)
	+ 1
}
