package "org.emoflon.gips.gipsl.examples.mdvne.seq"
import "platform:/resource/network.model/model/Model.ecore"

config {
	solver := GUROBI;
	timeLimit := true [value := 600.0];
	randomSeed := true [value := 0];
	presolve := true;
	debugOutput := true;
	tolerance := true [value := 0.00001];
}

// NACS
condition serverNotMapped = forbid serverIsMapped

pattern serverIsMapped {
	host: SubstrateServer

	virtualServer: VirtualServer {
		-host -> host
	}
}

condition switchNotMapped = forbid switchIsMapped

pattern switchIsMapped {
	host: SubstrateNode

	virtualSwitch: VirtualSwitch {
		-host -> host
	}
}

condition linkNotMapped = forbid linkIsMapped

pattern linkIsMapped {
	host: SubstrateHostLink

	virtualLink: VirtualLink {
		-host -> host
	}
}

condition networkNotMapped = forbid networkIsMapped && forbid networkIsMappedSrv

pattern networkIsMapped {
	host: SubstrateNetwork

	virtualNetwork: VirtualNetwork {
		-host -> host
	}
}

pattern networkIsMappedSrv {
	host: SubstrateServer

	virtualNetwork: VirtualNetwork {
		-hostServer -> host
	}
}

// Patterns for finding non embedded virtual elements
pattern vsrvNotMapped {
	virtualServer: VirtualServer
}
when serverNotMapped

pattern vswNotMapped {
	virtualSwitch: VirtualSwitch
}
when switchNotMapped

pattern vlNotMapped {
	virtualLink: VirtualLink
}
when linkNotMapped

// Actual rules
rule server2ServerRule {
	root: Root {
		-networks -> substrateNetwork
		-networks -> virtualNetwork
	}

	substrateServer: SubstrateServer {
		.residualCpu := substrateServer.residualCpu - virtualServer.cpu
		.residualMemory := substrateServer.residualMemory - virtualServer.memory
		.residualStorage := substrateServer.residualStorage - virtualServer.storage
	}

	virtualServer: VirtualServer {
		++ -host -> substrateServer
	}

	substrateNetwork: SubstrateNetwork {
		-nodess -> substrateServer
	}

	virtualNetwork: VirtualNetwork {
		-nodess -> virtualServer
	}
	# virtualServer.cpu <= substrateServer.residualCpu
	# virtualServer.memory <= substrateServer.residualMemory
	# virtualServer.storage <= substrateServer.residualStorage
}
when serverNotMapped

rule switch2NodeRule {
	root: Root {
		-networks -> substrateNetwork
		-networks -> virtualNetwork
	}

	substrateNode: SubstrateNode

	virtualSwitch: VirtualSwitch {
		++ -host -> substrateNode
	}

	substrateNetwork: SubstrateNetwork {
		-nodess -> substrateNode
	}

	virtualNetwork: VirtualNetwork {
		-nodess -> virtualSwitch
	}
}
when switchNotMapped

rule link2PathRule {
	root: Root {
		-networks -> substrateNetwork
		-networks -> virtualNetwork
	}

	substratePath: SubstratePath {
		.residualBandwidth := substratePath.residualBandwidth - virtualLink.bandwidth

		// Update all substrate links
		forEach links->l {
			iterator::l.residualBandwidth := iterator::l.residualBandwidth - virtualLink.bandwidth
		}
	}

	virtualLink: VirtualLink {
		++ -host -> substratePath
	}

	substrateNetwork: SubstrateNetwork {
		-paths -> substratePath
	}

	virtualNetwork: VirtualNetwork {
		-links -> virtualLink
	}
	# virtualLink.bandwidth <= substratePath.residualBandwidth
	
	// Explicitly exclude substrate paths with a residual bandwidth equals to 0
	# substratePath.residualBandwidth > 0
}
when linkNotMapped

rule link2ServerRule {
	root: Root {
		-networks -> substrateNetwork
		-networks -> virtualNetwork
	}

	substrateServer: SubstrateServer

	virtualLink: VirtualLink {
		++ -host -> substrateServer
	}

	substrateNetwork: SubstrateNetwork {
		-nodess -> substrateServer
	}

	virtualNetwork: VirtualNetwork {
		-links -> virtualLink
	}
}
when linkNotMapped

rule network2NetworkRule {
	root: Root {
		-networks -> substrateNetwork
		-networks -> virtualNetwork
	}

	substrateNetwork: SubstrateNetwork

	virtualNetwork: VirtualNetwork {
		++ -host -> substrateNetwork
	}
}
when networkNotMapped

//
// GIPSL starts here!
//

// Server 2 Server
mapping srv2srv to server2ServerRule {
	var index : EInt
};

constraint with vsrvNotMapped {
	mappings.srv2srv->filter(element.nodes.virtualServer == context.nodes.virtualServer)->sum(element.value) == 1
}

constraint with srv2srv {
	[context.value >= 1] <=> [context.variables.index >= 1]
}

constraint with srv2srv {
	context.variables.index >= 0
}

constraint with SubstrateServer {
	mappings.srv2srv->filter(element.nodes.substrateServer == context)->sum(element.nodes.virtualServer.cpu * element.value) <= context.residualCpu &
	mappings.srv2srv->filter(element.nodes.substrateServer == context)->sum(element.nodes.virtualServer.memory * element.value) <= context.residualMemory &
	mappings.srv2srv->filter(element.nodes.substrateServer == context)->sum(element.nodes.virtualServer.storage * element.value) <= context.residualStorage
}

// Switch 2 Node
mapping sw2node to switch2NodeRule {
	var index : EInt
};

constraint with vswNotMapped {
	mappings.sw2node->filter(element.nodes.virtualSwitch == context.nodes.virtualSwitch)->sum(element.value) == 1
}

constraint with sw2node {
	[context.value >= 1] <=> [context.variables.index >= 1]
}

constraint with sw2node {
	context.variables.index >= 0
}

// Link 2 Server
mapping l2s to link2ServerRule {
	var index : EInt
};

constraint with l2s {
	[context.value >= 1] <=> [context.variables.index >= 1]
}

constraint with l2s {
	context.variables.index >= 0
}

// Link 2 Path
mapping l2p to link2PathRule {
	var index : EInt
};

constraint with l2p {
	[context.value >= 1] <=> [context.variables.index >= 1]
}

constraint with l2p {
	context.variables.index >= 0
}

constraint with SubstratePath {
	mappings.l2p->filter(element.nodes.substratePath == context)->sum(element.nodes.virtualLink.bandwidth * element.value) <= context.residualBandwidth
}

// Every link must be mapped exactly once
constraint with vlNotMapped {
	mappings.l2s->filter(element.nodes.virtualLink == context.nodes.virtualLink)->sum(element.value)
	+
	mappings.l2p->filter(element.nodes.virtualLink == context.nodes.virtualLink)->sum(element.value)
	== 1
}

// Connect link to node mappings via the index variable
// Link 2 Server
constraint with link2ServerRule {
	[mappings.l2s->filter(element.nodes.virtualLink == context.nodes.virtualLink & element.nodes.substrateServer == context.nodes.substrateServer)->sum(element.value) >= 1]
	=>
	[
		mappings.l2s->filter(element.nodes.virtualLink == context.nodes.virtualLink & element.nodes.substrateServer == context.nodes.substrateServer)->sum(element.variables.index)
		>=
		mappings.srv2srv->filter(element.nodes.virtualServer == context.nodes.virtualLink.source & element.nodes.substrateServer == context.nodes.substrateServer)->sum(element.variables.index)
		+ mappings.sw2node->filter(element.nodes.virtualSwitch == context.nodes.virtualLink.source & element.nodes.substrateNode == context.nodes.substrateServer)->sum(element.variables.index)
		+ 1
		&
		mappings.l2s->filter(element.nodes.virtualLink == context.nodes.virtualLink & element.nodes.substrateServer == context.nodes.substrateServer)->sum(element.variables.index)
		>=
		mappings.srv2srv->filter(element.nodes.virtualServer == context.nodes.virtualLink.target & element.nodes.substrateServer == context.nodes.substrateServer)->sum(element.variables.index)
		+ mappings.sw2node->filter(element.nodes.virtualSwitch == context.nodes.virtualLink.target & element.nodes.substrateNode == context.nodes.substrateServer)->sum(element.variables.index)
		+ 1
	]
}

constraint with link2ServerRule {
	(mappings.srv2srv->filter(element.nodes.virtualServer == context.nodes.virtualLink.source & element.nodes.substrateServer == context.nodes.substrateServer)->sum(element.value) +
		mappings.sw2node->filter(element.nodes.virtualSwitch == context.nodes.virtualLink.source & element.nodes.substrateNode == context.nodes.substrateServer)->sum(element.value)) +
	(mappings.srv2srv->filter(element.nodes.virtualServer == context.nodes.virtualLink.target & element.nodes.substrateServer == context.nodes.substrateServer)->sum(element.value) +
		mappings.sw2node->filter(element.nodes.virtualSwitch == context.nodes.virtualLink.target & element.nodes.substrateNode == context.nodes.substrateServer)->sum(element.value))
	>= 2 * mappings.l2s->filter(element.nodes.substrateServer == context.nodes.substrateServer & element.nodes.virtualLink == context.nodes.virtualLink)->sum(element.value)
}
// constraint -> pattern::link2ServerRule {
// mappings.l2s->filter(element.nodes.substrateServer == context.nodes.substrateServer & m.nodes.virtualLink == context.nodes.virtualLink)->sum(element.value) >= 1
// <=>
// [
// (mappings.srv2srv->filter(element.nodes.virtualServer == context.nodes.virtualLink.source & m.nodes.substrateServer == context.nodes.substrateServer)->sum(element.value) +
// mappings.sw2node->filter(element.nodes.virtualSwitch == context.nodes.virtualLink.source & m.nodes.substrateNode == context.nodes.substrateServer)->sum(element.value))
// >= 1
//
// &
//
// (mappings.srv2srv->filter(element.nodes.virtualServer == context.nodes.virtualLink.target & m.nodes.substrateServer == context.nodes.substrateServer)->sum(element.value) +
// mappings.sw2node->filter(element.nodes.virtualSwitch == context.nodes.virtualLink.target & m.nodes.substrateNode == context.nodes.substrateServer)->sum(element.value))
// >= 1
// ]
// }

// Link 2 Path
constraint with link2PathRule {
	[mappings.l2p->filter(element.nodes.virtualLink == context.nodes.virtualLink & element.nodes.substratePath == context.nodes.substratePath)->sum(element.value) >= 1]
	=>
	[
		mappings.l2p->filter(element.nodes.virtualLink == context.nodes.virtualLink & element.nodes.substratePath == context.nodes.substratePath)->sum(element.variables.index)
		>=
		mappings.srv2srv->filter(element.nodes.virtualServer == context.nodes.virtualLink.source & element.nodes.substrateServer == context.nodes.substratePath.source)->sum(element.variables.index)
		+ mappings.sw2node->filter(element.nodes.virtualSwitch == context.nodes.virtualLink.source & element.nodes.substrateNode == context.nodes.substratePath.source)->sum(element.variables.index)
		+ 1
		&
		mappings.l2p->filter(element.nodes.virtualLink == context.nodes.virtualLink & element.nodes.substratePath == context.nodes.substratePath)->sum(element.variables.index)
		>=
		mappings.srv2srv->filter(element.nodes.virtualServer == context.nodes.virtualLink.target & element.nodes.substrateServer == context.nodes.substratePath.target)->sum(element.variables.index)
		+ mappings.sw2node->filter(element.nodes.virtualSwitch == context.nodes.virtualLink.target & element.nodes.substrateNode == context.nodes.substratePath.target)->sum(element.variables.index)
		+ 1
	]
}

constraint with link2PathRule {
	(mappings.srv2srv->filter(element.nodes.virtualServer == context.nodes.virtualLink.source & element.nodes.substrateServer == context.nodes.substratePath.source)->sum(element.value) +
		mappings.sw2node->filter(element.nodes.virtualSwitch == context.nodes.virtualLink.source & element.nodes.substrateNode == context.nodes.substratePath.source)->sum(element.value)) +
	(mappings.srv2srv->filter(element.nodes.virtualServer == context.nodes.virtualLink.target & element.nodes.substrateServer == context.nodes.substratePath.target)->sum(element.value) +
		mappings.sw2node->filter(element.nodes.virtualSwitch == context.nodes.virtualLink.target & element.nodes.substrateNode == context.nodes.substratePath.target)->sum(element.value))
	>= 2 * mappings.l2p->filter(element.nodes.substratePath == context.nodes.substratePath & element.nodes.virtualLink == context.nodes.virtualLink)->sum(element.value)
}
// constraint -> pattern::link2PathRule {
// mappings.l2p->filter(element.nodes.substratePath == context.nodes.substratePath & m.nodes.virtualLink == context.nodes.virtualLink)->sum(element.value) >= 1
// =>
// [
// (mappings.srv2srv->filter(element.nodes.virtualServer == context.nodes.virtualLink.source & m.nodes.substrateServer == context.nodes.substratePath.source)->sum(element.value) +
// mappings.sw2node->filter(element.nodes.virtualSwitch == context.nodes.virtualLink.source & m.nodes.substrateNode == context.nodes.substratePath.source)->sum(element.value))
// >= 1
//
// &
//
// (mappings.srv2srv->filter(element.nodes.virtualServer == context.nodes.virtualLink.target & m.nodes.substrateServer == context.nodes.substratePath.target)->sum(element.value)+
// mappings.sw2node->filter(element.nodes.virtualSwitch == context.nodes.virtualLink.target & m.nodes.substrateNode == context.nodes.substratePath.target)->sum(element.value))
// >= 1
// ]
// }

// Embed the virtual network
mapping net2net to network2NetworkRule {
	var index : EInt
};

constraint with network2NetworkRule {
	mappings.net2net->filter(element.nodes.virtualNetwork == context.nodes.virtualNetwork)->sum(element.value) == 1
}

constraint with net2net {
	[context.value >= 1] <=> [context.variables.index >= 1]
}

constraint with net2net {
	context.variables.index >= 0
}

// The virtual network's index must be higher than the indexes of all of its virtual link mappings.
// This must hold true for the link 2 server mapping and the link 2 path mapping for every virtual link.
constraint with link2ServerRule {
	mappings.net2net->filter(element.nodes.virtualNetwork == context.nodes.virtualLink.network)->sum(element.variables.index)
	>=
	mappings.l2s->filter(element.nodes.virtualLink == context.nodes.virtualLink & element.nodes.substrateServer == context.nodes.substrateServer)->sum(element.variables.index)
	+ 1
}

constraint with link2PathRule {
	mappings.net2net->filter(element.nodes.virtualNetwork == context.nodes.virtualLink.network)->sum(element.variables.index)
	>=
	mappings.l2p->filter(element.nodes.virtualLink == context.nodes.virtualLink & element.nodes.substratePath == context.nodes.substratePath)->sum(element.variables.index)
	+ 1
}

// TODO: These two constraints may be removed:

//
// The following two constraint templates are not strictly necessary.
// They ensure that the index number of the whole virtual network is always
// higher than all of the index numbers of all of its nodes (servers and switches).
// This constraint is already (implicitly) enforced by the link constraints that
// ensure that the source and target nodes of each virtual link get embedded
// before the link itself.
//
// index_node < index_link < index_network => index_node < index_network
//

// // The virtual network's index must be higher than the indexes of all of its virtual servers
// constraint -> pattern::vsrvNotMapped {
// mappings.net2net->filter(element.nodes.virtualNetwork == context.nodes.virtualServer.network)->sum(element.variables.index)
// >= 
// mappings.srv2srv->filter(element.nodes.virtualServer == context.nodes.virtualServer)->sum(element.variables.index)
// + 1
// }
//
// // the virtual network's index must be higher than the indexes of all of its virtual switches
// constraint -> pattern::vswNotMapped {
// mappings.net2net->filter(element.nodes.virtualNetwork == context.nodes.virtualSwitch.network)->sum(element.variables.index)
// >=
// mappings.sw2node->filter(element.nodes.virtualSwitch == context.nodes.virtualSwitch)->sum(element.variables.index)
// + 1
// }

//
// Additions to support multiple substrate networks
//

// If a match of a virtual network and a substrate network is selected,
// the number of selected switch and server mappings must be equal to
// the number of nodes that are contained in the same virtual network.
constraint with network2NetworkRule {
	mappings.net2net->filter(element.nodes.substrateNetwork == context.nodes.substrateNetwork & element.nodes.virtualNetwork == context.nodes.virtualNetwork)->sum(element.value) == 1
	=>
	mappings.sw2node->filter(element.nodes.substrateNetwork == context.nodes.substrateNetwork & element.nodes.virtualNetwork == context.nodes.virtualNetwork)->sum(element.value)
	+
	mappings.srv2srv->filter(element.nodes.substrateNetwork == context.nodes.substrateNetwork & element.nodes.virtualNetwork == context.nodes.virtualNetwork)->sum(element.value)
	>= context.nodes.virtualNetwork.nodess->count()
}

//
// Objectives
//

function srvObjIdx with srv2srv {
	context.variables.index
}

function swObjIdx with sw2node {
	context.variables.index
}

function lsObjIdx with l2s {
	context.variables.index
}

function lpObjIdx with l2p {
	context.variables.index
}

function netObjIdx with net2net {
	context.variables.index
}

function lpObj with l2p {
	context.nodes.virtualLink.bandwidth * context.nodes.substratePath.hops * context.value
}

function srvObj with srv2srv {
	(context.nodes.substrateServer.residualCpu / context.nodes.substrateServer.cpu +
		context.nodes.substrateServer.residualMemory / context.nodes.substrateServer.memory +
		context.nodes.substrateServer.residualStorage / context.nodes.substrateServer.storage)
	* context.value
}

objective : min {
	// Minimize the index variables
	functions.srvObjIdx
	+ functions.swObjIdx
	+ functions.lsObjIdx
	+ functions.lpObjIdx
	+ functions.netObjIdx
	// Usual MdVNE objective taken from the "normal" GIPS implementation
	+ functions.srvObj
	+ functions.lpObj
}
