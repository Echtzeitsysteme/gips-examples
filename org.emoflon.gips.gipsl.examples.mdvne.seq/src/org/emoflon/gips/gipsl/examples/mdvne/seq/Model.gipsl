package "org.emoflon.gips.gipsl.examples.mdvne.seq"
import "platform:/resource/network.model/model/Model.ecore"

config {  
	solver := GUROBI [home:="fu", license:="bar"];
	launchConfig := true [main := "org.emoflon.gips.gipsl.examples.mdvne.seq.ExampleMdVNESeq"];
	timeLimit := true [value := 120.0];
	randomSeed := true [value := 0];
	presolve := true;
	debugOutput := true;
	tolerance := true [value := 0.00001];
}

// NACS
condition serverNotMapped = forbid serverIsMapped
pattern serverIsMapped {
	host: SubstrateServer
	
	virtualServer: VirtualServer {
		-host -> host
	}
}

condition switchNotMapped = forbid switchIsMapped
pattern switchIsMapped {
	host: SubstrateNode
	
	virtualSwitch: VirtualSwitch {
		-host -> host
	}
}

condition linkNotMapped = forbid linkIsMapped
pattern linkIsMapped {
	host: SubstrateHostLink
	
	virtualLink: VirtualLink {
		-host -> host
	}
}

condition networkNotMapped = forbid networkIsMapped && forbid networkIsMappedSrv
pattern networkIsMapped {
	host: SubstrateNetwork
	
	virtualNetwork: VirtualNetwork {
		-host -> host
	}
}
pattern networkIsMappedSrv {
	host: SubstrateServer
	
	virtualNetwork: VirtualNetwork {
		-hostServer -> host
	}
}

// Patterns for finding non embedded virtual elements
pattern vsrvNotMapped {
	virtualServer: VirtualServer
}
when serverNotMapped

pattern vswNotMapped {
	virtualSwitch: VirtualSwitch
}
when switchNotMapped

pattern vlNotMapped {
	virtualLink: VirtualLink
}
when linkNotMapped

// Actual rules
rule server2ServerRule {
	root: Root {
		-networks -> substrateNetwork
		-networks -> virtualNetwork
	}
	
	substrateServer: SubstrateServer {
		.residualCpu := substrateServer.residualCpu - virtualServer.cpu
		.residualMemory := substrateServer.residualMemory - virtualServer.memory
		.residualStorage := substrateServer.residualStorage - virtualServer.storage
	}
	
	virtualServer: VirtualServer {
		++ -host -> substrateServer
	}
	
	substrateNetwork: SubstrateNetwork {
		-nodes -> substrateServer
	}
	
	virtualNetwork: VirtualNetwork {
		-nodes -> virtualServer
	}
	
	# virtualServer.cpu <= substrateServer.residualCpu
	# virtualServer.memory <= substrateServer.residualMemory
	# virtualServer.storage <= substrateServer.residualStorage
}
when serverNotMapped

rule switch2NodeRule {
	root: Root {
		-networks -> substrateNetwork
		-networks -> virtualNetwork
	}
	
	substrateNode: SubstrateNode
	
	virtualSwitch : VirtualSwitch {
		++ -host -> substrateNode
	}
	
	substrateNetwork: SubstrateNetwork {
		-nodes -> substrateNode
	}
	
	virtualNetwork: VirtualNetwork {
		-nodes -> virtualSwitch
	}
}
when switchNotMapped

rule link2PathRule {
	root: Root {
		-networks -> substrateNetwork
		-networks -> virtualNetwork
	}
	
	substratePath: SubstratePath {
		.residualBandwidth := substratePath.residualBandwidth - virtualLink.bandwidth
		
		// Update all substrate links
		forEach links->l {
			iterator::l.residualBandwidth := iterator::l.residualBandwidth - virtualLink.bandwidth
		}
	}
	
	virtualLink: VirtualLink {
		++ -host -> substratePath
	}
	
	substrateNetwork: SubstrateNetwork {
		-paths -> substratePath
	}
	
	virtualNetwork: VirtualNetwork {
		-links -> virtualLink
	}
	
	# virtualLink.bandwidth <= substratePath.residualBandwidth
	
	// Explicitly exclude substrate paths with a residual bandwidth equals to 0
	# substratePath.residualBandwidth > 0
}
when linkNotMapped

rule link2ServerRule {
	root: Root {
		-networks -> substrateNetwork
		-networks -> virtualNetwork
	}
	
	substrateServer: SubstrateServer
	
	virtualLink: VirtualLink {
		++ -host -> substrateServer
	}
	
	substrateNetwork: SubstrateNetwork {
		-nodes -> substrateServer
	}
	
	virtualNetwork: VirtualNetwork {
		-links -> virtualLink
	}
}
when linkNotMapped

rule network2NetworkRule {
	root: Root {
		-networks -> substrateNetwork
		-networks -> virtualNetwork
	}
	
	substrateNetwork: SubstrateNetwork
	
	virtualNetwork: VirtualNetwork {
		++ -host -> substrateNetwork
	}
}
when networkNotMapped

//
// GIPSL starts here!
//

// Server 2 Server
mapping srv2srv with server2ServerRule {
	var index : EInt
};

constraint -> pattern::vsrvNotMapped {
	mappings.srv2srv->filter(m | m.nodes().virtualServer == self.nodes().virtualServer)->sum(m | m.value()) == 1
}

constraint -> mapping::srv2srv {
	[self.value() >= 1] <=> [self.variables().index >= 1]
}

constraint -> class::SubstrateServer {
	mappings.srv2srv->filter(match | match.nodes().substrateServer == self)->sum(match | match.nodes().virtualServer.cpu) <= self.residualCpu &
    mappings.srv2srv->filter(match | match.nodes().substrateServer == self)->sum(match | match.nodes().virtualServer.memory) <= self.residualMemory &
    mappings.srv2srv->filter(match | match.nodes().substrateServer == self)->sum(match | match.nodes().virtualServer.storage) <= self.residualStorage
}

// Switch 2 Node
mapping sw2node with switch2NodeRule {
	var index : EInt
};

constraint -> pattern::vswNotMapped {
	mappings.sw2node->filter(m | m.nodes().virtualSwitch == self.nodes().virtualSwitch)->sum(m | m.value()) == 1
}

constraint -> mapping::sw2node {
	[self.value() >= 1] <=> [self.variables().index >= 1]
}

// Link 2 Server
mapping l2s with link2ServerRule {
	var index : EInt
};

constraint -> mapping::l2s {
	[self.value() >= 1] <=> [self.variables().index >= 1]
}

// Link 2 Path
mapping l2p with link2PathRule {
	var index : EInt
};

constraint -> mapping::l2p {
	[self.value() >= 1] <=> [self.variables().index >= 1]
}

constraint -> class::SubstratePath {
	mappings.l2p->filter(match | match.nodes().substratePath == self)->sum(match | match.nodes().virtualLink.bandwidth) <= self.residualBandwidth
}

// Every link must be mapped exactly once
constraint -> pattern::vlNotMapped {
	mappings.l2s->filter(m | m.nodes().virtualLink == self.nodes().virtualLink)->sum(m | m.value()) +
	mappings.l2p->filter(m | m.nodes().virtualLink == self.nodes().virtualLink)->sum(m | m.value())
	== 1
}

// Connect link to node mappings via the index variable
// Link 2 Server
constraint -> pattern::link2ServerRule {
	[mappings.l2s->filter(m | m.nodes().virtualLink == self.nodes().virtualLink & m.nodes().substrateServer == self.nodes().substrateServer)->sum(m | m.variables().index)
	>=
	mappings.srv2srv->filter(m | m.nodes().virtualServer == self.nodes().virtualLink.source & m.nodes().substrateServer == self.nodes().substrateServer)->sum(m | m.variables().index)
	+ 1
	
	|
	
	mappings.l2s->filter(m | m.nodes().virtualLink == self.nodes().virtualLink & m.nodes().substrateServer == self.nodes().substrateServer)->sum(m | m.variables().index)
	>=
	mappings.sw2node->filter(m | m.nodes().virtualSwitch == self.nodes().virtualLink.source & m.nodes().substrateNode == self.nodes().substrateServer)->sum(m | m.variables().index)]
	
	&
	
	[mappings.l2s->filter(m | m.nodes().virtualLink == self.nodes().virtualLink & m.nodes().substrateServer == self.nodes().substrateServer)->sum(m | m.variables().index)
	>=
	mappings.srv2srv->filter(m | m.nodes().virtualServer == self.nodes().virtualLink.target & m.nodes().substrateServer == self.nodes().substrateServer)->sum(m | m.variables().index)
	+ 1
	
	|
	
	mappings.l2s->filter(m | m.nodes().virtualLink == self.nodes().virtualLink & m.nodes().substrateServer == self.nodes().substrateServer)->sum(m | m.variables().index)
	>=
	mappings.sw2node->filter(m | m.nodes().virtualSwitch == self.nodes().virtualLink.target & m.nodes().substrateNode == self.nodes().substrateServer)->sum(m | m.variables().index)]
}

// Link 2 Path
constraint -> pattern::link2PathRule {
	[mappings.l2p->filter(m | m.nodes().virtualLink == self.nodes().virtualLink & m.nodes().substratePath == self.nodes().substratePath)->sum(m | m.variables().index)
	>=
	mappings.srv2srv->filter(m | m.nodes().virtualServer == self.nodes().virtualLink.source & m.nodes().substrateServer == self.nodes().substratePath.source)->sum(m | m.variables().index)
	+ 1
	
	|
	
	mappings.l2p->filter(m | m.nodes().virtualLink == self.nodes().virtualLink & m.nodes().substratePath == self.nodes().substratePath)->sum(m | m.variables().index)
	>=
	mappings.sw2node->filter(m | m.nodes().virtualSwitch == self.nodes().virtualLink.source & m.nodes().substrateNode == self.nodes().substratePath.source)->sum(m | m.variables().index)
	+ 1]
	
	&
	
	[mappings.l2p->filter(m | m.nodes().virtualLink == self.nodes().virtualLink & m.nodes().substratePath == self.nodes().substratePath)->sum(m | m.variables().index)
	>=
	mappings.srv2srv->filter(m | m.nodes().virtualServer == self.nodes().virtualLink.target & m.nodes().substrateServer == self.nodes().substratePath.target)->sum(m | m.variables().index)
	+ 1
	
	|
	
	mappings.l2p->filter(m | m.nodes().virtualLink == self.nodes().virtualLink & m.nodes().substratePath == self.nodes().substratePath)->sum(m | m.variables().index)
	>=
	mappings.sw2node->filter(m | m.nodes().virtualSwitch == self.nodes().virtualLink.target & m.nodes().substrateNode == self.nodes().substratePath.target)->sum(m | m.variables().index)
	+ 1]
}

// Embed the virtual network
mapping net2net with network2NetworkRule {
	var index : EInt
};

constraint -> pattern::network2NetworkRule {
	mappings.net2net->filter(m | m.nodes().virtualNetwork == self.nodes().virtualNetwork)->sum(m | m.value()) == 1
}

constraint -> mapping::net2net {
	[self.value() >= 1] <=> [self.variables().index >= 1]
}

// The virtual network's index must be higher than the indexes of all of its virtual link mappings.
// This must hold true for the link 2 server mapping and the link 2 path mapping for every virtual link.
constraint -> pattern::link2ServerRule {
	[mappings.net2net->filter(m | m.nodes().virtualNetwork == self.nodes().virtualLink.network)->sum(m | m.variables().index)
	>=
	mappings.l2s->filter(m | m.nodes().virtualLink == self.nodes().virtualLink)->sum(m | m.variables().index)
	+ 1]
}
constraint -> pattern::link2PathRule {
	[mappings.net2net->filter(m | m.nodes().virtualNetwork == self.nodes().virtualLink.network)->sum(m | m.variables().index)
	>=
	mappings.l2p->filter(m | m.nodes().virtualLink == self.nodes().virtualLink)->sum(m | m.variables().index)
	+ 1]
}

// TODO: These two constraints may be removed:

//
// The following two constraint templates are not strictly necessary.
// They ensure that the index number of the whole virtual network is always
// higher than all of the index numbers of all of its nodes (servers and switches).
// This constraint is already (implicitly) enforced by the link constraints that
// ensure that the source and target nodes of each virtual link get embedded
// before the link itself.
//
// index_node < index_link < index_network => index_node < index_network
//

// The virtual network's index must be higher than the indexes of all of its virtual servers
constraint -> pattern::vsrvNotMapped {
	mappings.net2net->filter(m | m.nodes().virtualNetwork == self.nodes().virtualServer.network)->sum(m | m.variables().index)
	>=
	mappings.srv2srv->filter(m | m.nodes().virtualServer == self.nodes().virtualServer)->sum(m | m.variables().index)
	+ 1
}

// the virtual network's index must be higher than the indexes of all of its virtual switches
constraint -> pattern::vswNotMapped {
	mappings.net2net->filter(m | m.nodes().virtualNetwork == self.nodes().virtualSwitch.network)->sum(m | m.variables().index)
	>=
	mappings.sw2node->filter(m | m.nodes().virtualSwitch == self.nodes().virtualSwitch)->sum(m | m.variables().index)
	+ 1
}
