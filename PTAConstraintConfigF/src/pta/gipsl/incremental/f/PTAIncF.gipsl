package "pta.gipsl.inc.f"
import "platform:/resource/PersonTaskAssignments/model/PersonTaskAssignments.ecore"
import "http://www.eclipse.org/emf/2002/Ecore"

config {
	solver := GUROBI [home := "c:\gurobi1000\win64", license := "c:\gurobi1000\win64\gurobi.lic"];
	launchConfig := true [main := "pta.extended.example.house.HouseConstructionExample"];
	timeLimit := true [value := 6000.0];
	randomSeed := true [value := 0];
	presolve := true;
	debugOutput := true;
	tolerance := true [value := 0.000001];
}

rule assignOffer {
	skill: Skill {
		-type -> skilltype
	}

	skilltype: SkillType

	worker: Person {
		-offers -> offer
		-skills -> skill
	}

	week: Week

	offer: Offer {
		++ -requirements -> requirement
		-week -> week
	}

	requirement: Requirement {
		-skillType -> skilltype
	}

	task: Task {
		-requirements -> requirement
		++ -weeks -> week
	}

	project: Project {
		-tasks -> task
		++ -persons -> worker
		++ -weeks -> week
	}
	# week.number >= project.initialWeekNumber
	# week.number < project.initialWeekNumber + project.weeksUntilLoss
	# skill.level >= requirement.skillLevel
	# worker.overtimeBonus <= requirement.overtimeBonus
	# worker.salary <= requirement.salary
}
when notAssigned

condition notAssigned = forbid offerToRequirement && forbid requirementToOffer // && forbid weekToTask2

pattern offerToRequirement {
	offer: Offer {
		-requirements -> r
	}

	r: Requirement
}

pattern requirementToOffer {
	o: Offer

	requirement: Requirement {
		-offers -> o
	}
}

pattern personToOffer {
	person: Person {
		-offers -> offer
	}

	offer: Offer
}
when freeOffer

condition freeOffer = forbid offerToRequirement

// pattern weekToTask2 {
// prevWeek: Week {
// -projects->project
// }
// project: Project {
// -tasks->previous
// -tasks->task
// }
// previous: Task {
// -weeks->prevWeek
// }
// week : Week
// task : Task {
// -previous->previous
// }
// #prevWeek.number > week.number
// }

rule updateProject(salary: EDouble) {
	project: Project {
		.sumSalary := param::salary
	}
	#project.sumSalary <= 0.0
}

pattern taskSequence {
	week: Week

	task: Task {
		-next -> next
	}

	next: Task

	project: Project {
		-tasks -> task
	}
	# week.number >= project.initialWeekNumber
	# week.number < project.initialWeekNumber + project.weeksUntilLoss
}

pattern finalTaskSequence {
	week: Week

	finalTask: Task {
		-previous -> previous
	}

	previous: Task

	project: Project {
		-tasks -> finalTask
	}
	# week.number >= project.initialWeekNumber
	# week.number < project.initialWeekNumber + project.weeksUntilLoss
	
}
when noNextTask

condition noNextTask = forbid taskHasNext

pattern taskHasNext {
	nextTask: Task

	finalTask: Task {
		-next -> nextTask
	}
}

pattern taskToRequirement {
	project: Project {
		-tasks -> task
	}

	task: Task {
		-requirements -> requirement
	}

	requirement: Requirement
}
when freeRequirement

condition freeRequirement = forbid requirementToOffer

mapping aom to assignOffer {
	var hours : EInt
	var overTime : EInt
};

mapping projectCost to updateProject {
	var salary : EDouble bind salary
};

// The sum of hours over all accepted offers must be at least as high as the requirement's hours, including overtime flexibility
constraint with taskToRequirement {
	mappings.aom->filter(element.nodes.requirement == context.nodes.requirement)->sum(element.variables.hours) + mappings.aom->filter(element.nodes.requirement == context.nodes.requirement)->sum(element.variables.overTime) == context.nodes.requirement.hours
}

constraint with updateProject {
	mappings.aom->filter(element.nodes.project == context.nodes.project)->sum(element.variables.hours * element.nodes.worker.salary) + mappings.aom->filter(element.nodes.project == context.nodes.project)->sum(element.variables.overTime * element.nodes.worker.overtimeBonus) ==
	mappings.projectCost->filter(element.nodes.project == context.nodes.project)->sum(element.variables.salary)
}

constraint with projectCost {
	context.variables.salary >= 0 &
	context.value >= 1
}

constraint with personToOffer {
	context.nodes.offer.hours * context.nodes.person.overtimeFlexibility >= mappings.aom->filter(element.nodes.offer == context.nodes.offer)->sum(element.variables.hours) + mappings.aom->filter(element.nodes.offer == context.nodes.offer)->sum(element.variables.overTime)
}

constraint with aom {
	// A <=> B : If hour variables of a mapping are non-zero, then the corresponding mapping variable must also be non-zero (and the other way around)
	[context.variables.hours + context.variables.overTime >= 1 <=> context.value >= 1]

	// The variables for hours and overTime must be non-negative
	& context.variables.hours >= 0
	& context.variables.overTime >= 0
}

constraint with taskSequence {
	// A: Precondition -> The current week gets assigned to the current task
	// B: Then -> There must be no week with a smaller number assigned to the subsequent task
	// A => B : If week is a week of the current task assignment, then there must not exist a task assignment to a subsequent task with the identical week number or a lesser week number.
	// 1 => 1 = 1 : Week is part of the current task assignment & no smaller week number in subsequent task exists -> true
	// 1 => 0 = 0 : Week is part of the current task assignment & a smaller week number in subsequent task exists -> false
	// 0 => 1 = 1 : Week is not part of the current task assignment & a smaller week number in subsequent task exists -> true
	// 0 => 0 = 1 : Week is not part of the current task assignment & no smaller week number in subsequent task exists -> true
	mappings.aom->filter(element.nodes.task == context.nodes.task & element.nodes.week == context.nodes.week)->sum(element.value) >= 1 =>
	mappings.aom->filter(element.nodes.task == context.nodes.next & element.nodes.week.number <= context.nodes.week.number)->sum(element.value) <= 0
}

constraint with finalTaskSequence {
	// A: Precondition -> The current week gets assigned to the current task
	// B: Then -> There must be no week with a smaller number assigned to the subsequent task
	// A => B : If week is a week of the current task assignment, then there must not exist a task assignment to a subsequent task with the identical week number or a lesser week number.
	// 1 => 1 = 1 : Week is part of the current task assignment & no smaller week number in subsequent task exists -> true
	// 1 => 0 = 0 : Week is part of the current task assignment & a smaller week number in subsequent task exists -> false
	// 0 => 1 = 1 : Week is not part of the current task assignment & a smaller week number in subsequent task exists -> true
	// 0 => 0 = 1 : Week is not part of the current task assignment & no smaller week number in subsequent task exists -> true
	mappings.aom->filter(element.nodes.task == context.nodes.finalTask & element.nodes.week == context.nodes.week)->sum(element.value) >= 1 =>
	mappings.aom->filter(element.nodes.task == context.nodes.previous & element.nodes.week.number >= context.nodes.week.number)->sum(element.value) <= 0
}

function minWorkers with Requirement {
	mappings.aom->filter(element.nodes.requirement == context)->sum(element.variables.hours * element.nodes.worker.salary)
}

function minOvertime with Requirement {
	mappings.aom->filter(element.nodes.requirement == context)->sum(element.variables.overTime * element.nodes.worker.overtimeBonus)
}

function finishEarly with Project {
	mappings.aom->filter(element.nodes.project == context)->sum(element.value * element.nodes.week.number * 0.1)
}

objective : min {
	functions.minWorkers + functions.minOvertime + functions.finishEarly
}
