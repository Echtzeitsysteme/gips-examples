package "org.emoflon.gips.gipsl.examples.extened.sdr"
import "platform:/resource/org.emoflon.gips.gipsl.examples.sdrmodel/model/Sdrmodel.ecore"
import "http://www.eclipse.org/emf/2002/Ecore"

config {  
	solver := GUROBI [home:="c:\gurobi1000\win64", license:="c:\gurobi1000\win64\gurobi.lic"];
	launchConfig := true [main := "org.emoflon.gips.gipsl.examples.extened.sdr.ExampleSdr"];
	timeLimit := true [value := 300.0];
	randomSeed := true [value := 0];
	presolve := true;
	debugOutput := true;
}

// Rule to map a block to a thread
rule block2thread {
	root: Root {
		-cpus -> cpu
		-jobs -> job
	}
	
	cpu: CPU {
		-cores -> core
	}
	
	// Also pins the job to a CPU
	job: Job {
		-blocks -> block
		++ -hosts->cpu
	}
	
	core: Core {
		-threads -> thread
	}
	
	thread: Thread
	
	block: Block {
		++ -host -> thread
	}
}

// Rule to map a flow to an inter-thread communication
rule flow2intercom {
	root: Root {
		-cpus -> cpu
		-jobs -> job
	}
	
	cpu: CPU {
		-intercoms -> intercom
	}
	
	job: Job {
		-flows -> flow
	}
	
	flow: Flow {
		++ -host -> intercom
	}
	
	intercom: Interthreadcom
}

// Rule to map a flow to a thread
rule flow2thread {
	root: Root {
		-cpus -> cpu
		-jobs -> job
	}
	
	cpu: CPU {
		-cores -> core
	}
	
	job: Job {
		-flows -> flow
	}
	
	core: Core {
		-threads -> thread
	}
	
	flow: Flow {
		++ -host -> thread
	}
	
	thread: Thread
}

rule thread (cycles : EInt, diff : EDouble, absDiff : EDouble){
	cpu :CPU {
		- cores -> core
	}
	
	core : Core {
		- threads -> thread
	}
	
	thread: Thread {
		.allocatedCycles := param::cycles
		.diff := param::diff
		.absDiff := param::absDiff
	}
}

//
// GIPSL starts here!
//

mapping b2t with block2thread;
mapping f2i with flow2intercom;
mapping f2t with flow2thread;

mapping usedThread with thread {
	var cycles : EInt bind cycles
	var diff : EDouble bind diff
	var absDiff : EDouble bind absDiff
};

constraint -> mapping::usedThread {
	[self.variables().cycles >= 1 => self.value() >= 1] &
	[self.value() >= 1 => self.variables().cycles >= 1 ] &
	self.variables().cycles >= 0 &
	self.variables().absDiff >= 0
}

// This constraints forbids the case in line 3 of the normal implication table
// -> It changes it to line 3 of our modified table
constraint -> class::Thread {
	mappings.b2t->filter(m | m.nodes().thread == self)->sum(m | m.nodes().block.cycles) == 
	mappings.usedThread->filter(m | m.nodes().thread == self)->sum(m | m.variables().cycles)
}

constraint -> class::Thread {
	mappings.usedThread->filter(m | m.nodes().thread == self)->sum(m | m.variables().diff) == 
	mappings.usedThread->filter(m | m.nodes().thread == self)->sum(m | m.variables().cycles) - 
	mappings.usedThread->sum(m | m.variables().cycles * m.nodes().cpu.inverseThreadCount)
}

constraint -> mapping::usedThread {
	// A: Precondition -> diff >= 0
	// B: Then -> abs_diff == diff
	// A => B
	// 1 => 1 = 1 : diff >= 0 & abs_diff == diff -> true
	// 1 => 0 = 0 : diff >= 0 & abs_diff != diff -> false
	// 0 => 1 = 1 : diff < 0 & abs_diff == diff -> true
	// 0 => 0 = 1 : diff < 0 & abs_diff != diff -> true
	[self.variables().diff >= 0 =>
	[self.variables().absDiff >= self.variables().diff & self.variables().absDiff <= self.variables().diff]] &
	// A: Precondition -> diff <= 0
	// B: Then -> abs_diff == -diff
	// A => B
	// 1 => 1 = 1 : diff < 0 & abs_diff == -diff -> true
	// 1 => 0 = 0 : diff < 0 & abs_diff != -diff -> false
	// 0 => 1 = 1 : diff > 0 & abs_diff == diff -> true
	// 0 => 0 = 1 : diff > 0 & abs_diff != diff -> true
	[self.variables().diff <= -0.0001 =>
	[self.variables().absDiff >= (self.variables().diff * -1.0) & self.variables().absDiff <= (self.variables().diff * -1.0)]]
	// A => B & C => D
	// 0 => 0 & 0 => 0 : IMPOSSIBLE -> diff < 0 & diff >= 0 is logical contradiction
	// 0 => 0 & 0 => 1 : IMPOSSIBLE -> diff < 0 & diff >= 0 is logical contradiction
	// 0 => 0 & 1 => 0 : FALSE -> diff < 0 & abs_diff != diff & abs_diff != -diff		// Forbid random abs_diff values
	// 0 => 0 & 1 => 1 : TRUE -> diff < 0 & abs_diff != diff & abs_diff == -diff		// abs_diff == |diff| -> desired outcome!
	// 0 => 1 & 0 => 0 : IMPOSSIBLE -> diff < 0 & diff >= 0 is logical contradiction
	// 0 => 1 & 0 => 1 : IMPOSSIBLE -> diff < 0 & diff >= 0 is logical contradiction
	// 0 => 1 & 1 => 0 : FALSE -> diff < 0 & abs_diff == diff & abs_diff != -diff		// Forbids abs_diff == diff & abs_diff == -diff contradictions
	// 0 => 1 & 1 => 1 : TRUE -> diff < 0 & abs_diff == diff & abs_diff == -diff		// This line is a contradiction but gets fixed through absDiff >= 0
	// 1 => 0 & 0 => 0 : FALSE -> diff >= 0 & abs_diff != diff & abs_diff != -diff  	// Forbids abs_diff != diff & abs_diff != -diff definition gaps
	// 1 => 0 & 0 => 1 : FALSE -> diff >= 0 & abs_diff != diff & abs_diff == -diff		// Forbids abs_diff == -diff when diff >= 0
	// 1 => 0 & 1 => 0 : IMPOSSIBLE -> diff >= 0 & diff < 0 is logical contradiction
	// 1 => 0 & 1 => 1 : IMPOSSIBLE -> diff >= 0 & diff < 0 is logical contradiction
	// 1 => 1 & 0 => 0 : TRUE -> diff >= 0 & abs_diff == diff & abs_diff != -diff       // abs_diff == |diff| -> desired outcome!
	// 1 => 1 & 0 => 1 : TRUE -> diff >= 0 & abs_diff == diff & abs_diff == -diff		// This line is a contradiction but gets fixed through absDiff >= 0
	// 1 => 1 & 1 => 0 : IMPOSSIBLE -> diff >= 0 & diff < 0 is logical contradiction
	// 1 => 1 & 1 => 1 : IMPOSSIBLE -> diff >= 0 & diff < 0 is logical contradiction
}

// Every block must be mapped to exactly one thread
constraint -> class::Block {
	mappings.b2t->filter(m | m.nodes().block == self)->count() == 1
}

// Every flow must be mapped to an intercom or a thread
constraint -> class::Flow {
	mappings.f2i->filter(m | m.nodes().flow == self)->count() +
	mappings.f2t->filter(m | m.nodes().flow == self)->count()
	== 1
}

// Start and target of a flow must be embedded on its host counter parts (1, intercom)
constraint -> pattern::flow2intercom {
	mappings.b2t->filter(m | m.nodes().block == self.nodes().flow.source & m.nodes().thread == self.nodes().intercom.source)->count() +
	mappings.b2t->filter(m | m.nodes().block == self.nodes().flow.target & m.nodes().thread == self.nodes().intercom.target)->count()
	>= 2 * mappings.f2i->filter(m | m.nodes().intercom == self.nodes().intercom & m.nodes().flow == self.nodes().flow)->count()
}

// Start and target of a flow must be embedded on its host counter parts (2, thread)
constraint -> pattern::flow2thread {
	mappings.b2t->filter(m | m.nodes().block == self.nodes().flow.source & m.nodes().thread == self.nodes().thread)->count() +
	mappings.b2t->filter(m | m.nodes().block == self.nodes().flow.target & m.nodes().thread == self.nodes().thread)->count()
	>= 2 * mappings.f2t->filter(m | m.nodes().thread == self.nodes().thread & m.nodes().flow == self.nodes().flow)->count()
}

// Objective = inter-thread communication
objective intercomcost -> class::Interthreadcom {
	mappings.f2i->filter(m | m.nodes().intercom.source.core == m.nodes().intercom.target.core & m.nodes().intercom == self)->sum(m | m.nodes().flow.rate) * 2 +
	mappings.f2i->filter(m | m.nodes().intercom.source.core != m.nodes().intercom.target.core & m.nodes().intercom == self)->sum(m | m.nodes().flow.rate) * 6
}

// Objective = flow to thread mapping (constant)
objective f2tcost -> mapping::f2t {
	1
}
 
// Objective for used threads:
// In  general, we want to maximize the number of used threads.
//objective glob -> class::Root {
//	-(mappings.usedThread->count())
//}

objective glob -> class::Thread {
	mappings.usedThread->filter(m | m.nodes().thread == self)->sum(m | m.variables().absDiff)
}

// Combine the local objectives and give the maximization of used threads a large head start.
global objective : min {
	intercomcost + f2tcost + glob
}
