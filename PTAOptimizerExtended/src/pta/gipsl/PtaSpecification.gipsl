package "pta.gipsl.extended"

import "platform:/resource/PersonTaskAssignments/model/PersonTaskAssignments.ecore"
import "http://www.eclipse.org/emf/2002/Ecore"

config {
	solver := GUROBI [home:="c:\gurobi1000\win64", license:="c:\gurobi1000\win64\gurobi.lic"];
	launchConfig := true [main := "pta.extended.example.house.HouseConstructionExample"];
	timeLimit := true [value := 6000.0];
	randomSeed := true [value := 0];
	presolve := true;
	debugOutput := true;
	tolerance := true [value := 0.000001];
}


rule assignOffer {
	skill : Skill
	worker : Person {
		-offers->offer
		-skills->skill
	}
	week : Week
	offer : Offer {
		++ -requirements-> requirement
		- week -> week
	}
	
	requirement : Requirement
	
	task : Task {
		-requirements->requirement
		++ - weeks -> week
	}
	
	project : Project {
		- tasks -> task
		++ -persons -> worker
		++ -weeks -> week
	}
	
	# skill.name == requirement.name
	# week.number >= project.initialWeekNumber
	# week.number < project.initialWeekNumber + project.weeksUntilLoss
	# skill.level >= requirement.skillLevel
//	# worker.overtimeBonus <= requirement.overtimeBonus
//	# worker.salary <= requirement.salary
}

pattern personToOffer {
	person : Person {
		- offers -> offer
	}
	
	offer : Offer
}

rule updateProject(salary : EDouble) {
	project : Project {
		.sumSalary := param::salary
	}
}

pattern taskSequence {
	week : Week 
	task : Task {
		- next -> next
	}
	
	next : Task
	
	project : Project {
		- tasks -> task
	}
	
	# week.number >= project.initialWeekNumber
	# week.number < project.initialWeekNumber + project.weeksUntilLoss
}

pattern finalTaskSequence {
	week : Week
	finalTask : Task {
		- previous -> previous
	}
	
	previous : Task
	
	project : Project {
		- tasks -> finalTask
	}
	
	# week.number >= project.initialWeekNumber
	# week.number < project.initialWeekNumber + project.weeksUntilLoss
	
} when noNextTask

condition noNextTask = forbid taskHasNext

pattern taskHasNext {
	nextTask : Task
	finalTask : Task {
		-next->nextTask
	}
}

pattern projectInitialWeek {
	week : Week
	project : Project {
		- start -> week
	}
}


mapping aom with assignOffer {
	var hours : EInt
	var overTime : EInt
};


mapping projectCost with updateProject {
	var salary : EDouble bind salary
};

//The sum of hours over all accepted offers must be at least as high as the requirement's hours, including overtime flexibility
constraint -> class::Requirement {
	mappings.aom->filter(m | m.nodes().requirement == self)->sum(m | m.variables().hours) + mappings.aom->filter(m | m.nodes().requirement == self)->sum(m | m.variables().overTime) >= self.hours
}

constraint -> class::Project {
	mappings.aom->filter(m | m.nodes().project == self)->sum(m | m.variables().hours * m.nodes().worker.salary) + mappings.aom->filter(m | m.nodes().requirement == self)->sum(m | m.variables().overTime * m.nodes().worker.overtimeBonus) ==
	mappings.projectCost->filter(m | m.nodes().project == self)->sum(m | m.variables().salary)
}

constraint -> mapping::projectCost {
	self.variables().salary >= 0 &
	self.value() >= 1
}

constraint -> pattern::personToOffer {
	self.nodes().offer.hours * self.nodes().person.overtimeFlexibility >= mappings.aom->filter(m | m.nodes().offer == self.nodes().offer)->sum(m | m.variables().hours) + mappings.aom->filter(m | m.nodes().offer == self.nodes().offer)->sum(m | m.variables().overTime)
}

constraint -> mapping::aom {
	// A: Precondition -> The hour variables of a mapping are non-zero
	// B: Then -> The corresponding mapping variable is non-zero
	// A => B : If hour variables of a mapping are non-zero, then the corresponding mapping variable must also be non-zero
	// 1 => 1 = 1 : Variables are assigned some hour values and the correspond mapping variable is 1 -> true
	// 1 => 0 = 0 : Variables are assigned some hour values and the correspond mapping variable is 0 -> false
	// 0 => 1 = 1 : Variables are assigned no hour values and the correspond mapping variable is 1 -> true
	// 0 => 0 = 1 : Variables are assigned no hour values and the correspond mapping variable is 0 -> true
	[self.variables().hours + self.variables().overTime >= 1 =>
	self.value() >= 1] & 
	// B: Precondition -> The corresponding mapping variable is non-zero
	// A: Then -> The hour variables of a mapping are non-zero
	// B => A : If a mapping variable is non-zero, then the corresponding hour variables must also be non-zero.
	// 1 => 1 = 1 : Mapping variable > 0 and hour variables > 0 -> true
	// 1 => 0 = 0 : Mapping variable > 0 and hour variables <= 0 -> false
	// 0 => 1 = 1 : Mapping variables == 0 and hour variables > 0 -> true
	// 0 => 0 = 1 : mapping variables == 0 and hour variables <= 0 -> true
	[self.value() >= 1 =>
	self.variables().hours + self.variables().overTime >= 1]
	
	// A => B & B => A : If a mapping variable is non-zero, then the corresponding hour variables must also be non-zero.
	// 1 => 1 & 1 => 1 = 1 : -> true
	// 1 => 0 & 0 => 1 = 0 : -> false
	// 0 => 1 & 1 => 0 = 0 : -> false
	// 0 => 0 & 0 => 0 = 1 : -> true
	& self.variables().hours >= 0
	& self.variables().overTime >= 0
}
 
constraint -> pattern::taskSequence {
	// A: Precondition -> The current week gets assigned to the current task
	// B: Then -> There must be no week with a smaller number assigned to the subsequent task
	// A => B : If week is a week of the current task assignment, then there must not exist a task assignment to a subsequent task with the identical week number or a lesser week number.
	// 1 => 1 = 1 : Week is part of the current task assignment & no smaller week number in subsequent task exists -> true
	// 1 => 0 = 0 : Week is part of the current task assignment & a smaller week number in subsequent task exists -> false
	// 0 => 1 = 1 : Week is not part of the current task assignment & a smaller week number in subsequent task exists -> true
	// 0 => 0 = 1 : Week is not part of the current task assignment & no smaller week number in subsequent task exists -> true
	mappings.aom->filter(m | m.nodes().task == self.nodes().task & m.nodes().week == self.nodes().week)->count() >= 1 =>
	mappings.aom->filter(m | m.nodes().task == self.nodes().next & m.nodes().week.number <= self.nodes().week.number)->count() <= 0
}

constraint -> pattern::finalTaskSequence {
	// A: Precondition -> The current week gets assigned to the current task
	// B: Then -> There must be no week with a smaller number assigned to the subsequent task
	// A => B : If week is a week of the current task assignment, then there must not exist a task assignment to a subsequent task with the identical week number or a lesser week number.
	// 1 => 1 = 1 : Week is part of the current task assignment & no smaller week number in subsequent task exists -> true
	// 1 => 0 = 0 : Week is part of the current task assignment & a smaller week number in subsequent task exists -> false
	// 0 => 1 = 1 : Week is not part of the current task assignment & a smaller week number in subsequent task exists -> true
	// 0 => 0 = 1 : Week is not part of the current task assignment & no smaller week number in subsequent task exists -> true
	mappings.aom->filter(m | m.nodes().task == self.nodes().finalTask & m.nodes().week == self.nodes().week)->count() >= 1 =>
	mappings.aom->filter(m | m.nodes().task == self.nodes().previous & m.nodes().week.number >= self.nodes().week.number)->count() <= 0
}

objective minWorkers -> class::Requirement {
	mappings.aom->filter(m | m.nodes().requirement == self)->sum(m | m.variables().hours * m.nodes().worker.salary)
}

objective minOvertime -> class::Requirement {
	mappings.aom->filter(m | m.nodes().requirement == self)->sum(m | m.variables().overTime * m.nodes().worker.overtimeBonus)
}

objective finishEarly -> class::Project {
	mappings.aom->filter(m | m.nodes().project == self)->sum(m | m.nodes().week.number) * 0.001
} 

global objective : min {
	minWorkers + minOvertime + finishEarly
}
