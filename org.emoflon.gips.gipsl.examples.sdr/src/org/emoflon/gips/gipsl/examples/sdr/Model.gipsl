package "org.emoflon.gips.gipsl.examples.sdr"
import "platform:/resource/org.emoflon.gips.gipsl.examples.sdrmodel/model/Sdrmodel.ecore"

config {  
	solver := GUROBI [home:="fu", license:="bar"];
	launchConfig := true [main := "TODO"];
	timeLimit := true [value := 30.0];
	randomSeed := true [value := 0];
	presolve := true;
	debugOutput := true;
}

// Rule to map a block to a thread
rule block2thread {
	root: Root {
		-cpus -> cpu
		-jobs -> job
	}
	
	cpu: CPU {
		-cores -> core
	}
	
	// Also pins the job to a CPU
	job: Job {
		-blocks -> block
		++ -hosts->cpu
	}
	
	core: Core {
		-threads -> thread
	}
	
	thread: Thread
	
	block: Block {
		++ -host -> thread
	}
}

// Rule to map a flow to an inter-thread communication
rule flow2intercom {
	root: Root {
		-cpus -> cpu
		-jobs -> job
	}
	
	cpu: CPU {
		-intercoms -> intercom
	}
	
	job: Job {
		-flows -> flow
	}
	
	flow: Flow {
		++ -host -> intercom
	}
	
	intercom: Interthreadcom
}

// Rule to map a flow to a thread
rule flow2thread {
	root: Root {
		-cpus -> cpu
		-jobs -> job
	}
	
	cpu: CPU {
		-cores -> core
	}
	
	job: Job {
		-flows -> flow
	}
	
	core: Core {
		-threads -> thread
	}
	
	flow: Flow {
		++ -host -> thread
	}
	
	thread: Thread
}

pattern thread {
	thread: Thread
}

//
// GIPSL starts here!
//

mapping b2t with block2thread;
mapping f2i with flow2intercom;
mapping f2t with flow2thread;

// Utility mapping that must be 1 if the corresponding thread will be used, 0 otherwise
mapping usedThread with thread;

//
// General remarks for the two following constraints:
// The mapping 'usedThread' can only be 0 or 1 because there is at most one match per thread.
// Therefore, it is sufficient to only limit one side of the arithmetic expression.
//

// Implication table
// 1 => 1 = 1
// 1 => 0 = 0
// 0 => 1 = 1
// 0 => 0 = 1

// Ensures that the implication for the 'usedThread' mapping holds
constraint -> class::Thread {
	mappings.b2t->filter(m | m.nodes().thread == self)->count() >= 1
	=> mappings.usedThread->filter(m | m.nodes().thread == self)->count() >= 1
}

// Our modified table
// 1 => 1 = 1
// 1 => 0 = 0
// 0 => 1 = 0
// 0 => 0 = 1

// This constraints forbids the case in line 3 of the normal implication table
// -> It changes it to line 3 of our modified table
constraint -> class::Thread {
	mappings.b2t->filter(m | m.nodes().thread == self)->count()
	>= mappings.usedThread->filter(m | m.nodes().thread == self)->count()
}

// Every block must be mapped to exactly one thread
constraint -> class::Block {
	mappings.b2t->filter(m | m.nodes().block == self)->count() == 1
}

// Every flow must be mapped to an intercom or a thread
constraint -> class::Flow {
	mappings.f2i->filter(m | m.nodes().flow == self)->count() +
	mappings.f2t->filter(m | m.nodes().flow == self)->count()
	== 1
}

// Start and target of a flow must be embedded on its host counter parts (1, intercom)
constraint -> pattern::flow2intercom {
	mappings.b2t->filter(m | m.nodes().block == self.nodes().flow.source & m.nodes().thread == self.nodes().intercom.source)->count() +
	mappings.b2t->filter(m | m.nodes().block == self.nodes().flow.target & m.nodes().thread == self.nodes().intercom.target)->count()
	>= 2 * mappings.f2i->filter(m | m.nodes().intercom == self.nodes().intercom & m.nodes().flow == self.nodes().flow)->count()
}

// Start and target of a flow must be embedded on its host counter parts (2, thread)
constraint -> pattern::flow2thread {
	mappings.b2t->filter(m | m.nodes().block == self.nodes().flow.source & m.nodes().thread == self.nodes().thread)->count() +
	mappings.b2t->filter(m | m.nodes().block == self.nodes().flow.target & m.nodes().thread == self.nodes().thread)->count()
	>= 2 * mappings.f2t->filter(m | m.nodes().thread == self.nodes().thread & m.nodes().flow == self.nodes().flow)->count()
}

// Objective = inter-thread communication
objective intercomcost -> class::Interthreadcom {
	mappings.f2i->filter(m | m.nodes().intercom.source.core == m.nodes().intercom.target.core & m.nodes().intercom == self)->sum(m | m.nodes().flow.rate) * 2 +
	mappings.f2i->filter(m | m.nodes().intercom.source.core != m.nodes().intercom.target.core & m.nodes().intercom == self)->sum(m | m.nodes().flow.rate) * 6
}

// Objective = flow to thread mapping (constant)
objective f2tcost -> mapping::f2t {
	1
}

// Objective for used threads:
// In  general, we want to maximize the number of used threads.
objective glob -> class::Root {
	-(mappings.usedThread->count())
}

// Combine the local objectives and give the maximization of used threads a large head start.
global objective : min {
	intercomcost + f2tcost + glob * 100
}
