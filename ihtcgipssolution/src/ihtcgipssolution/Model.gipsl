package "ihtcgipssolution"
import "platform:/resource/ihtcmetamodel/model/Ihtcmetamodel.ecore"

//
// This specification tries to take as much constraints into
// account as possible.
//
// Current state:
// - Due to some bugs, it is not correctly runnable.
// - Some learnings (i.e., speed up achievements) of other
// projects may be missing in this specification.
//

//
// Configuration
//

config {  
	solver := GUROBI;
	timeLimit := true [value := 30.0, includeInitTime := true];
	randomSeed := true [value := 0];
	presolve := true;
	debugOutput := true;
	lpOutput := true [path := "gurobi.lp"];
//	threadCount := true [value := 4];
}

//
// GT
//

rule assignNurseToRoomShift {
	h : Hospital {
		- nurses -> n
		- shifts -> s
		- rooms -> r
	}
	
	n : Nurse {
		- shiftMaxLoads -> sml
	}
	
	s : Shift
	r : Room
	
	++ rsna : RoomShiftNurseAssignment {
		++ - nurse -> n
		++ - shift -> s
		++ - room -> r
	}
	
	sml : NurseShiftMaxLoad {
		- shift -> s
	}
	
	# sml.maxLoad > 0
}

rule assignAdmissionDayToPatient {
	h : Hospital {
		- patients -> p
		- days -> d
	}
	
	p : Patient {
		++ - admissionDay -> d
	}
	
	d : Day
	
	# p.surgeryReleaseDay <= d.id
	# p.surgeryDueDate >= d.id
}

// H2: Compatible rooms: Patients can only be assigned to one of
// their compatible rooms
pattern roomPatientIncompatible {
	h : Hospital {
		- patients -> p
		- rooms -> r
	}
	
	p : Patient {
		- incompatibleRooms -> r
	}
	r : Room
}
condition roomNotIncompatible = forbid roomPatientIncompatible

rule assignRoomToPatient {
	h : Hospital {
		- patients -> p
		- rooms -> r
	}
	
	p : Patient {
		++ - assignedRoom -> r
	}
	
	r : Room
}
when roomNotIncompatible

rule assignSurgeryToPatient {
	h : Hospital {
		- patients -> p
		- surgeons -> s
		- days -> d
		- operatingTheaters -> ot
	}
	
	p : Patient {
		++ - surgeryAssignment -> sa
		- surgeon -> s
	}
	
	s : Surgeon {
		- availabilities -> as
	}
	
	d : Day
	ot : OperatingTheater {
		- availabilities -> aot
	}
	
	++ sa : SurgeryAssignment {
		++ - patient -> p
		++ - surgeon -> s
		++ - operationTheater -> ot
		++ - day -> d
	}
	
	aot : OperatingTheaterAvailability {
		- day -> d
	}
	# aot.availability > 0
	
	as : SurgeonAvailability {
		- day -> d
	}
	# as.availability > 0
}

pattern dayRoomTuple {
	h : Hospital {
		- days -> d
		- rooms -> r
	}
	
	d : Day
	r : Room
}

pattern shiftRoomTuple {
	h : Hospital {
		- shifts -> s
		- rooms -> r
	}
	
	s : Shift
	r : Room
}

pattern daySurgeonTuple {
	h : Hospital {
		- days -> d
		- surgeons -> s	
	}
	
	d : Day
	s : Surgeon
}

pattern dayOperatingTheaterAvailabilityTriple {
	h : Hospital {
		- days -> d
		- operatingTheaters -> ot
	}
	
	d : Day
	
	ot : OperatingTheater {
		- availabilities -> aot
	}
	
	aot : OperatingTheaterAvailability
	# aot.availability > 0
}

pattern dayOperatingTheaterTuple {
	h : Hospital {
		- days -> d
		- operatingTheaters -> ot
	}
	
	d : Day
	
	ot : OperatingTheater
}

pattern findMandatoryPatient {
	h : Hospital {
		- patients -> p
	}
	
	p : Patient
	
	# p.mandatory == true
}

pattern findOptionalPatient {
	h : Hospital {
		- patients -> p
	}
	
	p : Patient
	
	# p.mandatory == false
}

pattern dayPatientTuple {
	h : Hospital {
		- patients -> p
		- days -> d
	}
	
	p : Patient
	d : Day
	
	# p.surgeryReleaseDay <= d.id
	# p.surgeryDueDate + p.lengthOfStay - 1 >= d.id
}

pattern roomShiftTuple {
	h : Hospital {
		- rooms -> r
		- shifts -> s
	}
	
	r : Room
	
	s : Shift
}

pattern patientRoomDay {
	h : Hospital {
		- rooms -> r
		- patients -> p
		- days -> d
	}
	
	r : Room
	p : Patient
	d : Day
	
	# p.surgeryReleaseDay <= d.id
	# p.surgeryDueDate + p.lengthOfStay - 1 >= d.id
}

pattern occupantRoomDay {
	h : Hospital {
		- rooms -> r
		- occupants -> o
		- days -> d
	}
	
	r : Room
	o : Occupant
	d : Day
	
	# r.name == o.roomId
	# o.lengthOfStay >= d.id
}

pattern dayRoomGender {
	h : Hospital {
		- days -> d
		- rooms -> r
		- genders -> g
	}
	
	d : Day
	r : Room
	g : Gender
}

pattern nurseShiftRoomMaxLoad {
	h : Hospital {
		- nurses -> n
		- shifts -> s
		- rooms -> r
	}
	
	n : Nurse {
		- shiftMaxLoads -> sml
	}
	
	s : Shift
	
	sml : NurseShiftMaxLoad {
		- shift -> s
	}
	
	# sml.maxLoad > 0
	
	r : Room
}

pattern nurseShiftMaxLoad {
	h : Hospital {
		- nurses -> n
		- shifts -> s
	}
	
	n : Nurse {
		- shiftMaxLoads -> sml
	}
	
	s : Shift
	
	sml : NurseShiftMaxLoad {
		- shift -> s
	}
	
	# sml.maxLoad > 0
}

pattern patientRoomShiftLoad {
	h : Hospital {
		- rooms -> r
		- patients -> p
		- days -> d
		- shifts -> s
	}
	
	r : Room
	
	p : Patient {
		- workloadsProduced -> pwp
	}
	
	d : Day {
		- shifts -> s
	}
	
	s : Shift
	
	pwp : PatientWorkloadProduced
	
	# p.surgeryReleaseDay <= d.id
	# p.surgeryDueDate + p.lengthOfStay - 1 >= d.id
}

pattern occupantRoomShiftLoad {
	h : Hospital {
		- occupants -> o
		- rooms -> r
	}
	
	o : Occupant {
		- workloadsProduced -> owp
	}
	
	r : Room
	
	owp: OccupantWorkloadProduced
	
	# r.name == o.roomId
}

pattern surgeonOtDayTriple {
	h : Hospital {
		- days -> d
		- surgeons -> s
		- operatingTheaters -> ot
	}
	
	d : Day
	s : Surgeon
	ot : OperatingTheater {
		- availabilities -> availability
	}
	
	availability : OperatingTheaterAvailability {
		- day -> d
	}
}

//
// GIPSL
//

//
// Mappings
//

// Assign nurse to a room and shift
mapping anrs to assignNurseToRoomShift;

// Assign an admission day to a patient
mapping aadp to assignAdmissionDayToPatient;

// Assign a room to a patient
mapping arp to assignRoomToPatient;

// Assign a surgery to a patient
mapping asp to assignSurgeryToPatient;

// Mapping that holds the information if a patient `p` is scheduled for day `d` in room `r`
mapping roomDayPatientLoad to patientRoomDay {
	var z : EBoolean
};

mapping occupantRoomDayMapping to occupantRoomDay {
	var z : EBoolean
};

// Mapping that holds the cumulative number of all patients on day `d` in room `r`
// This mapping also holds the minimum and the maximum age assigned to this room `r`
// on a given day `d`
mapping roomDayLoad to dayRoomTuple {
	var load : EInt
	var minAge : EInt
	var maxAge : EInt
};

// Mapping that is true if gender `g` is contained in room `r` on day `d`
mapping roomDayGender to dayRoomGender;

// Mapping that is true if operating theater `ot` has at least one operation on day `d`
mapping otDayOpened to dayOperatingTheaterTuple;

// Mapping that holds the produced load by patient `p` in shift `s` in room `r`
mapping roomShiftPatientProducedLoad to patientRoomShiftLoad {
	var producedLoad : EInt
};

// Mapping that holds the produced load by all patients and occupants in shift `s`
// in room `r`
mapping roomShiftProducedLoad to shiftRoomTuple {
	var producedLoad : EInt
};

// Mapping that holds the cumulative workload of a nurse `n` on shift `s` in
// room `r`
mapping nurseShiftRoomLoad to nurseShiftRoomMaxLoad {
	var load : EInt
};

// Mapping that holds the `overload` of nurse `n` in shift `s`
// `overload` = 0 if the cumulative load of `n` does not exceed the maximum workload
// `overload` = cumulative_load - n_maximum_workload otherwise
mapping nurseShiftOverload to nurseShiftMaxLoad {
	var overload : EInt
};

// Mapping that is true if surgeon `s` has at least one operation in `ot` on day `d`
mapping surgeonOtDay to surgeonOtDayTriple;

//
// Constraints
//

//constraint with roomDayPatientLoad {
//	mappings.roomDayLoad->filter(
//		element.nodes.r == context.nodes.r
//		& element.nodes.d == context.nodes.d
//	)->sum(element.variables.minAge)
//	<= context.nodes.p.ageGroup.numericAge * context.value
//	
//	&
//	
//	mappings.roomDayLoad->filter(
//		element.nodes.r == context.nodes.r
//		& element.nodes.d == context.nodes.d
//	)->sum(element.variables.maxAge)
//	>= context.nodes.p.ageGroup.numericAge  * context.value
//}
constraint with roomDayLoad {
	context.variables.minAge >= 0
	&
	context.variables.maxAge >= 0
	&
	context.variables.minAge <= context.variables.maxAge
//	
//	&
//	context.variables.minAge <= patterns.findAgeGroup->sum(element.nodes.ag.numericAge)
}
// ???
//constraint with occupantRoomDay {
//	mappings.roomDayLoad->filter(
//		element.nodes.r == context.nodes.r
//		& element.nodes.d == context.nodes.d
//	)->sum(element.variables.minAge)
//	<= context.nodes.o.ageGroup.numericAge
//	
//	&
//	
//	mappings.roomDayLoad->filter(
//		element.nodes.r == context.nodes.r
//		& element.nodes.d == context.nodes.d
//	)->sum(element.variables.maxAge)
//	>= context.nodes.o.ageGroup.numericAge
//}

//constraint with roomDayPatientLoad {
//	mappings.roomDayLoad->filter(
//		element.nodes.r == context.nodes.r
//		& element.nodes.d == context.nodes.d
//	)->sum(element.variables.minAge)
//	<= context.nodes.p.ageGroup.numericAge * context.value
//}
// Max constraint is fine because the nature of the problem's
// goal is always minimization
constraint with roomDayPatientLoad {
	mappings.roomDayLoad->filter(
		element.nodes.r == context.nodes.r
		& element.nodes.d == context.nodes.d
	)->sum(element.variables.maxAge)
	>= context.nodes.p.ageGroup.numericAge  * context.value
}
constraint with occupantRoomDay {
	mappings.roomDayLoad->filter(
		element.nodes.r == context.nodes.r
		& element.nodes.d == context.nodes.d
	)->sum(element.variables.maxAge)
	>= context.nodes.o.ageGroup.numericAge
}

// Min constraint is complicated
//
// Q <= a * R_i
constraint with roomDayPatientLoad {
	mappings.roomDayLoad->filter(
		element.nodes.r == context.nodes.r
		& element.nodes.d == context.nodes.d
	)->sum(element.variables.minAge)
	<= context.nodes.p.ageGroup.numericAge  * context.value
}
// Q <= a * R_i
constraint with occupantRoomDay {
	mappings.roomDayLoad->filter(
		element.nodes.r == context.nodes.r
		& element.nodes.d == context.nodes.d
	)->sum(element.variables.minAge)
	<= context.nodes.o.ageGroup.numericAge
}
// Q >= a * R_i - M(1 - z_i)
constraint with roomDayPatientLoad {
	mappings.roomDayLoad->filter(
		element.nodes.r == context.nodes.r
		& element.nodes.d == context.nodes.d
	)->sum(element.variables.minAge)
	>= context.nodes.p.ageGroup.numericAge  * context.value
	- 1000 * (1 - context.variables.z)
}
// Q >= a * R_i - M(1 - z_i)
constraint with occupantRoomDayMapping {
	mappings.roomDayLoad->filter(
		element.nodes.r == context.nodes.r
		& element.nodes.d == context.nodes.d
	)->sum(element.variables.minAge)
	>= context.nodes.o.ageGroup.numericAge
	- 1000 * (1 - context.variables.z)
}

// sum_i(z_i) == 1
constraint with dayRoomTuple {
	[
		mappings.roomDayPatientLoad->filter(element.nodes.r == context.nodes.r & element.nodes.d == context.nodes.d)->sum(element.value)
		+
		patterns.occupantRoomDay->filter(element.nodes.r == context.nodes.r & element.nodes.d == context.nodes.d)->sum(1)
		>= 1
	]
	
	=>
	
	[
		mappings.roomDayPatientLoad->filter(element.nodes.r == context.nodes.r & element.nodes.d == context.nodes.d)->sum(element.variables.z)
		+ mappings.occupantRoomDayMapping->filter(element.nodes.r == context.nodes.r & element.nodes.d == context.nodes.d)->sum(element.variables.z)
		== 1
	]
	
//	mappings.roomDayPatientLoad->filter(element.nodes.r == context.nodes.r & element.nodes.d == context.nodes.d)->sum(element.variables.z)
//	+ mappings.occupantRoomDayMapping->filter(element.nodes.r == context.nodes.r & element.nodes.d == context.nodes.d)->sum(element.variables.z)
//	== 1
}

pattern findAgeGroup {
	h : Hospital {
		- ageGroups -> ag
	}
	
	ag : AgeGroup
}

// This constraints sets the respective `surgeonOtDay` mapping to 1
// if and only if at least one operation takes place in `ot` on day `d` by surgeon `s`.
constraint with surgeonOtDay {
	// faster reformulation
	mappings.asp->filter(element.nodes.d == context.nodes.d & element.nodes.ot == context.nodes.ot & element.nodes.s == context.nodes.s)->sum(element.value)
	<=
	1000 * context.value
	
	&
	
	mappings.asp->filter(element.nodes.d == context.nodes.d & element.nodes.ot == context.nodes.ot & element.nodes.s == context.nodes.s)->sum(element.value)
	>=
	context.value
}

// This constraints sets the respective `otDayOpenend` mapping to 1
// if and only if at least one operation takes place in `ot` on day `d`.
constraint with otDayOpened {
//	mappings.asp->filter(element.nodes.d == context.nodes.d & element.nodes.ot == context.nodes.ot)->sum(element.value)
//	>= 1
//	<=>
//	context.value == 1

	// faster reformulation
	mappings.asp->filter(element.nodes.d == context.nodes.d & element.nodes.ot == context.nodes.ot)->sum(element.value)
	<=
	1000 * context.value
	
	&
	
	mappings.asp->filter(element.nodes.d == context.nodes.d & element.nodes.ot == context.nodes.ot)->sum(element.value)
	>=
	context.value
}

// Constraint that saves the produced workload of patient `p` in shift `s`
// in room `r`
constraint with roomShiftPatientProducedLoad {
	context.variables.producedLoad
	==
	mappings.aadp->filter(element.nodes.p == context.nodes.p & element.nodes.d.id - 1 <= context.nodes.d.id //
	)->sum(context.nodes.pwp.workloadProduced * element.value)
}

// Constraint that accumulates all produced loads of all patients and occupants
// in room `r` on shift `s`
constraint with roomShiftProducedLoad {
	context.variables.producedLoad
	==
	// patients
	mappings.roomShiftPatientProducedLoad->filter( //
		element.nodes.r == context.nodes.r
		& element.nodes.s == context.nodes.s
	)->sum(element.variables.producedLoad)
	
	+
	// occupants
	patterns.occupantRoomShiftLoad->filter(element.nodes.r == context.nodes.r //
		& element.nodes.owp.shift == context.nodes.s //
	)->sum(element.nodes.owp.workloadProduced)
}

// Constraint that saves the cumulative load of nurse `n` in room `r`
// on shift `s` in the variable `load`.
// TODO: faster reformulation possible?
constraint with nurseShiftRoomLoad {
	[
		mappings.anrs->filter( //
			element.nodes.n == context.nodes.n //
			& element.nodes.r == context.nodes.r //
			& element.nodes.s == context.nodes.s //
		)->sum(element.value) == 1
		=>
		context.variables.load
		==
		mappings.roomShiftProducedLoad->filter( //
			element.nodes.r == context.nodes.r //
			& element.nodes.s == context.nodes.s //
		)->sum(element.variables.producedLoad)
	]

	&

	[
		mappings.anrs->filter( //
			element.nodes.n == context.nodes.n //
			& element.nodes.r == context.nodes.r //
			& element.nodes.s == context.nodes.s //
		)->sum(element.value) == 0
		=>
		context.variables.load == 0
	]
}

// Constraint that sets the cumulative overload of nurse `n` in
// shift `s` in the variable `overload`.
// TODO: faster reformulation possible?
constraint with nurseShiftOverload {
	[
		mappings.nurseShiftRoomLoad->filter( //
			element.nodes.n == context.nodes.n //
			& element.nodes.s == context.nodes.s //
		)->sum(element.variables.load)
		>
		context.nodes.sml.maxLoad
		=>
		context.variables.overload
		==
		mappings.nurseShiftRoomLoad->filter( //
			element.nodes.n == context.nodes.n //
			& element.nodes.s == context.nodes.s //
		)->sum(element.variables.load)
		- context.nodes.sml.maxLoad
	]
	
	&
	
	[
		mappings.nurseShiftRoomLoad->filter( //
			element.nodes.n == context.nodes.n //
			& element.nodes.s == context.nodes.s //
		)->sum(element.variables.load)
		<=
		context.nodes.sml.maxLoad
		=>
		context.variables.overload
		==
		0
	]
}

// If a patient `p` is scheduled for room `r` on a day `d` that is within the
// patients scheduled time frame, set the respective mapping variable to 1.
constraint with roomDayPatientLoad {
//	mappings.aadp->filter( //
//		element.nodes.p == context.nodes.p //
//		& element.nodes.d.id - 1 <= context.nodes.d.id //
//	)->sum(element.value)
//	+
//	mappings.aadp->filter( //
//		element.nodes.p == context.nodes.p //
//		& element.nodes.d.id + context.nodes.p.lengthOfStay - 1 >= context.nodes.d.id //
//	)->sum(element.value)
//	+
//	mappings.arp->filter( //
//		element.nodes.p == context.nodes.p //
//		& element.nodes.r == context.nodes.r //
//	)->sum(element.value)
//	== 3
//	<=>
//	context.value == 1

	// faster reformulation
	[
		mappings.aadp->filter( //
			element.nodes.p == context.nodes.p //
			& element.nodes.d.id - 1 <= context.nodes.d.id //
		)->sum(element.value)
		+
		mappings.aadp->filter( //
			element.nodes.p == context.nodes.p //
			& element.nodes.d.id + context.nodes.p.lengthOfStay - 1 >= context.nodes.d.id //
		)->sum(element.value)
		+
		mappings.arp->filter( //
			element.nodes.p == context.nodes.p //
			& element.nodes.r == context.nodes.r //
		)->sum(element.value)
		- 2
		<=
		1000 * context.value
	]
	
	&
	
	[
		mappings.aadp->filter( //
			element.nodes.p == context.nodes.p //
			& element.nodes.d.id - 1 <= context.nodes.d.id //
		)->sum(element.value)
		+
		mappings.aadp->filter( //
			element.nodes.p == context.nodes.p //
			& element.nodes.d.id + context.nodes.p.lengthOfStay - 1 >= context.nodes.d.id //
		)->sum(element.value)
		+
		mappings.arp->filter( //
			element.nodes.p == context.nodes.p //
			& element.nodes.r == context.nodes.r //
		)->sum(element.value)
		>=
		3 * context.value
	]
}

// The room `r` has a specific load (=number of patients and occupants)
// on day `d`. This value must be saved in the free mapping variable
// `load` for each room `r` on each day `d`.
// load_r = number_of_patients(r,d) + number_of_occupants(r,d) 
constraint with roomDayLoad {
	context.variables.load
	==
	// patients
	mappings.roomDayPatientLoad->filter( //
		element.nodes.r == context.nodes.r //
		& element.nodes.d == context.nodes.d //
	)->sum(element.value)
	
	+
	// occupants
	patterns.occupantRoomDay->filter(element.nodes.r == context.nodes.r & element.nodes.d == context.nodes.d)->sum(1)
}

// H1: No gender mix per room
//
// Translation: at most one gender must be present in a room `r` on day `d`
constraint with dayRoomTuple {
	mappings.roomDayGender->filter(
		element.nodes.r == context.nodes.r //
		& element.nodes.d == context.nodes.d //	
	)->sum(element.value)
	<=
	1
}
// faster reformulation
constraint with roomDayGender {
	mappings.roomDayPatientLoad->filter( //
		element.nodes.d == context.nodes.d //
		& element.nodes.r == context.nodes.r //
		& element.nodes.p.gender == context.nodes.g.name //
	)->sum(element.value)
	+
	patterns.occupantRoomDay->filter( //
		element.nodes.d == context.nodes.d //
		& element.nodes.r == context.nodes.r //
		& element.nodes.o.gender == context.nodes.g.name //
	)->sum(1)
	<=
	1000 * context.value
	
	&
	
	mappings.roomDayPatientLoad->filter( //
		element.nodes.d == context.nodes.d //
		& element.nodes.r == context.nodes.r //
		& element.nodes.p.gender == context.nodes.g.name //
	)->sum(element.value)
	+
	patterns.occupantRoomDay->filter( //
		element.nodes.d == context.nodes.d //
		& element.nodes.r == context.nodes.r //
		& element.nodes.o.gender == context.nodes.g.name //
	)->sum(1)
	>=
	context.value
}

// H7: Room capacity: The number of patients in each room in each day cannot
// exceed the capacity of the room.
constraint with roomDayLoad {
	context.variables.load <= context.nodes.r.capacity
}

// H3: Surgeon overtime: The maximum surgery time of a surgeon must not be exceeded.
constraint with daySurgeonTuple {
	// find variable assigned surgery time for a specific day and surgeon
	mappings.asp->filter( //
		element.nodes.d == context.nodes.d //
		& element.nodes.s == context.nodes.s
	)->sum(element.nodes.p.surgeryDuration * element.value)
	
	// must be smaller or equal to the surgeon's availability
	<=
	
	// get the surgeon's availability for the same specific day
	context.nodes.s.availabilities->filter(element.day == context.nodes.d)->sum(element.availability)
}

// H4: OT overtime: The duration of all surgeries allocated to an OT on a day
// must not exceed its maximum capacity.
constraint with dayOperatingTheaterAvailabilityTriple {
	// find variable assigned surgeries for a specific day and operating theater
	mappings.asp->filter( //
		element.nodes.d == context.nodes.d //
		& element.nodes.ot == context.nodes.ot //
	)->sum(element.nodes.p.surgeryDuration * element.value)
	
	// must be smaller of equal to the operating theater's maximum capacity
	<=
	
	// get the operating theater's capacity for the same specific day
	context.nodes.ot.availabilities->filter(element.day == context.nodes.d)->sum(element.availability)
}

// H5: Mandatory versus optional patients: All mandatory patients must be admitted within the
// scheduling period, whereas optional patients may be postponed to future scheduling periods.
//
// This constraint ensures that all mandatory patients will be included.
constraint with findMandatoryPatient {
	// All mandatory patients get an admission day.
	mappings.aadp->filter(element.nodes.p == context.nodes.p)->sum(element.value) == 1
	&
	// All mandatory patients get a room.
	mappings.arp->filter(element.nodes.p == context.nodes.p)->sum(element.value) == 1
}

// 2.2 Solution: "i. the admission date for patients, or, in the case of optional patients,
// potentially their postponement to the next scheduling period;"
//
// "– mandatory/optional: mandatory patients must be admitted during the
// scheduling period, while the admission of optional patients can be postponed
// until a future scheduling period."
//
// "H5 Mandatory versus optional patients: All mandatory patients must be admitted within
// the scheduling period, whereas optional patients may be postponed to future scheduling
// periods."
//
// This constraint ensures that optional patients can (but must not) be included.
constraint with findOptionalPatient {
	// Optional patients can have an admission day
	mappings.aadp->filter(element.nodes.p == context.nodes.p)->sum(element.value) <= 1
	&
	// Optional patients can have an assigned room
	mappings.arp->filter(element.nodes.p == context.nodes.p)->sum(element.value) <= 1
	
	// If an optional patient has an admission day (assigned room) they must
	// also have an assigned room (admission day)
	&
	mappings.aadp->filter(element.nodes.p == context.nodes.p)->sum(element.value)
	==
	mappings.arp->filter(element.nodes.p == context.nodes.p)->sum(element.value)
}

// H6: Admission day: A patient can be admitted on any day from their release
// date to their due date. Given that optional patients do not have a due date,
// they can be admitted on any day after their release date.
//
// Part 1: A patient can be admitted on any day from their release date to their due date.
constraint with findMandatoryPatient {
	mappings.aadp->filter( //
		element.nodes.p == context.nodes.p //
		// the following two constraints will be checked via the LHS of the GT rule
//		& element.nodes.d.id >= context.nodes.p.surgeryReleaseDay //
//		& element.nodes.d.id <= context.nodes.p.surgeryDueDate //
	)->sum(element.value)
	== 1
}

// 2.2 Solution: "Note that a patient stays in only one room during the entire length of their
// stay, meaning a patient cannot be transferred from one room to another."
//
// This constraint ensures that each patient is located in at most one room.
constraint with Patient {
	mappings.arp->filter(element.nodes.p == context)->sum(element.value) <= 1
}

// 2.2 Solution: "We also assume that all patients undergo surgery, and that this takes place
// on the day of admission."
//
// Connect all patient admission days to the surgery days.
constraint with dayPatientTuple {
	// This is a shortcut specification for the following constraint:
	// "If the admission day `d` will be assigned to patient `p`, the patient `p` must
	// also have their surgery on day `d` (and vice versa)."
	// Normally, one would implement this with the Boolean equivalence operator `<=>`
	// but since we do only allow one surgery per patient and also only one admission
	// day per patient, this constraint effectively does the same but with way less
	// helper constraints necessary.
	mappings.aadp->filter(element.nodes.p == context.nodes.p & element.nodes.d == context.nodes.d)->sum(element.value)
	==
	mappings.asp->filter(element.nodes.p == context.nodes.p & element.nodes.d == context.nodes.d)->sum(element.value)
}

// 2.2 Solution: "A nurse can be assigned to more than one room in each shift (but only one
// nurse is assigned to a room in a shift). Finally, note that it is necessary to assign
// a nurse to a room on a given shift only if that room contains patients on the day
// to which the shift belongs. Nevertheless, assigning nurses to empty rooms would
// be feasible and does not incur additional costs."
//
// This constraint ensures that there is at most one nurse per room per shift.
constraint with roomShiftTuple {
	mappings.anrs->filter(element.nodes.r == context.nodes.r & element.nodes.s == context.nodes.s)->sum(element.value)
	<= 1
}

// 2.2 Solution: "A nurse can be assigned to more than one room in each shift (but only one
// nurse is assigned to a room in a shift). Finally, note that it is necessary to assign
// a nurse to a room on a given shift only if that room contains patients on the day
// to which the shift belongs. Nevertheless, assigning nurses to empty rooms would
// be feasible and does not incur additional costs."
//
// This constraint ensures that there is at least one nurse per room that contains patients in a shift.
constraint with roomShiftTuple {
//	// If there is at least one patient `p` assigned to room `r` on day `d` ...
//	mappings.roomDayLoad->filter( //
//		element.nodes.r == context.nodes.r //
//		& element.nodes.d == context.nodes.s.day //
//	)->sum(element.variables.load) > 0
//	=>
//	// ... there must be exactly one nurse assigned to room `r` in shift `s` (that is part of day `d`).
//	mappings.anrs->filter(element.nodes.r == context.nodes.r & element.nodes.s == context.nodes.s)->sum(element.value) == 1

	// faster reformulation
	// This is a shortcut specification for the following constraint:
	// If there is at least one patient `p` assigned to room `r` on day `d`,
	// there must be a nurse assigned to room `r` in shift `s` (that is part of day `d`).
	mappings.roomDayLoad->filter( //
		element.nodes.r == context.nodes.r //
		& element.nodes.d == context.nodes.s.day //
	)->sum(element.variables.load)
	<=
	mappings.anrs->filter(element.nodes.r == context.nodes.r & element.nodes.s == context.nodes.s)->sum(element.value)
	*
	1000
}

//
// Objectives
//

// S8 Unscheduled patients: The number of optional patients who are not admitted
// in the current scheduling period should be minimized.
//
// Unscheduled optional patients
function electiveUnscheduledPatients with findOptionalPatient {
	1 - mappings.aadp->filter(element.nodes.p == context.nodes.p)->sum(element.value)
}

// S7 Admission delay: The number of days between a patient’s release date and
// their actual date of admission should be minimized.
function admissionDelay with aadp {
	(context.nodes.d.id - context.nodes.p.surgeryReleaseDay) * context.value
}

// S4 Maximum workload: For each shift, the total workload induced by patients
// staying in rooms assigned to a nurse should not exceed the maximum workload
// of that nurse in that shift. The penalty is the amount by which the total
// workload exceeds the limit, or 0 if it does not exceed it.
function maximumWorkload with nurseShiftOverload {
	context.variables.overload
}

// S5 Open OTs: The number of OTs opened on each day should be minimized.
// Note that if an OT has no patients assigned for a particular day, it should
// not open on that day.
function openOts with otDayOpened {
	context.value
}

// S6 Surgeon transfer: The number of different OTs a surgeon is assigned to per
// working day should be minimized.
function surgeonTransfer with daySurgeonTuple {
	mappings.surgeonOtDay->filter(element.nodes.s == context.nodes.s & element.nodes.d == context.nodes.d)->sum(element.value)
}

// S1 Age groups: For each day of the scheduling period and for each room, the
// maximum difference between age groups of patients sharing the room should
// be minimized.
function roomMixedAge with roomDayLoad {
	context.variables.maxAge - context.variables.minAge
}

// Global objective: minimize the weighted sum of all individual costs
objective : min {
	0
//	+ functions.electiveUnscheduledPatients * types.Weight->sum(element.unscheduledOptional)
//	+ functions.admissionDelay * types.Weight->sum(element.patientDelay)
//	+ functions.maximumWorkload * types.Weight->sum(element.nurseExcessiveWorkload)
//	+ functions.openOts * types.Weight->sum(element.openOperatingTheater)
//	+ functions.surgeonTransfer * types.Weight->sum(element.surgeonTransfer)
	+ functions.roomMixedAge //* types.Weight->sum(element.roomMixedAge)
}
