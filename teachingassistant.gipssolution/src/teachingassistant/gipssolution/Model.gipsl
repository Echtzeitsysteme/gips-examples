package "teachingassistant.gipssolution"
import "platform:/resource/teachingassistant.metamodel/model/Metamodel.ecore"

config {
	solver := GUROBI;
	timeLimit := true [value := 120.0];
	randomSeed := true [value := 0];
	presolve := true;
	debugOutput := true;
}

// Paper reference for this example:
//
// Qu, Xiaobo, Yi, Wen, Wang, Tingsong, Wang, Shuaian, Xiao, Lin, Liu, Zhiyuan,
// "Mixed-Integer Linear Programming Models for Teaching Assistant Assignmen
// and Extensions",
// Scientific Programming, 2017, 9057947, 7 pages, 2017.
// doi: https://doi.org/10.1155/2017/9057947

// Extensions/cases:
//
// M0: Find a valid plan and maximize the number of perfectly fitting assistants
// M1: An assistant must not have two tutorials in the same time slot
// M2: Maximize the number of course content overlaps for each assistant
// M3: Controlling the number of TAs for one course/lecturer
// M4: Controlling the number of days a TA works

// ------------------------------

//
// GT patterns and rules
//

// Assigns a teaching assistant to a tutorial.
//
// SkillType must match and the tutor's preference
// for this topic must at least be 1.
rule assignAssistantToTutorial {
	a: Assistant {
		-skills -> s
	}

	t: Tutorial {
		++ -givenBy -> a
	}

	d: Department {
		-assistants -> a
		-tutorials -> t
	}

	s: Skill

	// SkillType must match
	# t.type == s.type
	
	// preference must be at least 1
	# s.preference >= 1
}

// Pattern to find all possible combinations of
// assistants and times slots. This is used for the
// extension M1.
pattern findAssistantTimeslotTuple {
	a: Assistant

	ts: Timeslot
}

// Pattern to find possible tutorial content overlaps
// for an assistant `a`. This is used for the
// extension M2.
pattern findAssistantContentOverlap {
	a: Assistant

	t1: Tutorial

	t2: Tutorial
	# t1.type == t2.type
}

// Finds assistant `a` that has the highest possible
// preference (2) for the tutorial `t`.
// This is used for M0.
pattern findSkilledAssistant {
	a: Assistant {
		-skills -> s
	}

	s: Skill

	t: Tutorial
	# s.preference == 2
	# s.type == t.type
}

// Find all possible combinations of lecturer `l`
// and assistant `a`.
// This is used for the extension M3.
pattern findLecturerAssistantTuple {
	l: Lecturer

	a: Assistant
}

// Finds all possible combinations of assistant `a`
// and day `d`.
// This is used for the extension M4.
pattern findAssistantDayTuple {
	a: Assistant

	d: Day
}

// ------------------------------

//
// GIPSL mappings
//

// Mapping to find and execute all teaching assistant assignments.
mapping at to assignAssistantToTutorial;

// M3: Mapping that must be 1 if assistant `a` works for
// lecturer `l` (utility).
mapping laAssignment to findLecturerAssistantTuple;

// M4: Mapping that must be 1 if assistant `a` works on
// day `d` (utility).
mapping adAssignment to findAssistantDayTuple;

// ------------------------------

//
// Constraints
//

// Every tutorial must be given exactly once.
constraint with Tutorial {
	mappings.at->filter(element.nodes.t == context)->sum(element.value) == 1
}

// The duration of all assignments for every assistant must lay
// in their valid time interval (`min` <= `#assignments` <= `max`).
constraint with Assistant {
	mappings.at->filter(element.nodes.a == context)->sum(element.nodes.t.duration * element.value) >= context.minimumHoursPerWeek
	&
	mappings.at->filter(element.nodes.a == context)->sum(element.nodes.t.duration * element.value) <= context.maximumHoursPerWeek
}

// M1: An assistant must not have two tutorials in the same time slot
// Formulation in GIPSL: for a given tuple of an Assistant `a` and a
// time slot `ts`, there must be at most one tutorial given by assistant
// `a` in time slot `ts`.
constraint with findAssistantTimeslotTuple {
	mappings.at->filter(element.nodes.a == context.nodes.a & element.nodes.t.timeslot == context.nodes.ts)->sum(element.value)
	<= 1
}

// M3: If assistant a works for lecturer `l`, set its mapping variable
// to 1 (utility).
constraint with findLecturerAssistantTuple {
	mappings.laAssignment->filter(element.nodes.a == context.nodes.a & element.nodes.l == context.nodes.l)->sum(element.value) == 1
	<=>
	mappings.at->filter(element.nodes.a == context.nodes.a & element.nodes.t.lecturer == context.nodes.l)->sum(element.value) >= 1
}

// M3: Controlling the number of TAs for one course/lecturer
// Formulation in GIPSL: the number of assigned TAs for a given
// lecturer must be at most `maximumNumberOfTas`.
constraint with Lecturer {
	mappings.laAssignment->filter(element.nodes.l == context)->sum(element.value) <= context.maximumNumberOfTas
}

// M4: If assistant `a` works on day `d`, set its mapping variable to 1 (utility).
constraint with findAssistantDayTuple {
	mappings.adAssignment->filter(element.nodes.a == context.nodes.a & element.nodes.d == context.nodes.d)->sum(element.value) == 1
	<=>
	mappings.at->filter(element.nodes.a == context.nodes.a & element.nodes.t.timeslot.day == context.nodes.d)->sum(element.value) >= 1
}

// M4: Controlling the number of days a TA works
// Formulation in GIPSL: the number of assigned days must be smaller 
// or equal to the number of maximum days per week (of the assistant).
constraint with Assistant {
	mappings.adAssignment->filter(element.nodes.a == context)->sum(element.value) <= context.maximumDaysPerWeek
}

// ------------------------------

//
// Objectives
//

// M0: Maximize the number of perfectly fitting assistants (skill type wise).
function assistantSkillsObj with findSkilledAssistant {
	mappings.at->filter(element.nodes.a == context.nodes.a & element.nodes.t == context.nodes.t)->sum(element.value)
}

// M2: Maximize the number of course content overlaps for each
// assistant, i.e., we want the tutorials on the same topics held
// by the same assistants if possible. This is equal to the maximization
// of overlapping triples (assistant `a`, tutorial `t1`, and tutorial `t2`
// which are both given by assistant `a`).
function contentOverlapObj with findAssistantContentOverlap {
	mappings.at->filter(element.nodes.a == context.nodes.a & element.nodes.t == context.nodes.t1)->sum(element.value)
	+
	mappings.at->filter(element.nodes.a == context.nodes.a & element.nodes.t == context.nodes.t2)->sum(element.value)
}

// Global objective that uses weights to prioritize the goals
// The constants are arbitrarily chosen.
objective : max {
	// M0: If possible, use assistants with highest skill
	1 * functions.assistantSkillsObj
	+
	// M2: Maximize topic overlap for each assistant
	0.5 * functions.contentOverlapObj
}
