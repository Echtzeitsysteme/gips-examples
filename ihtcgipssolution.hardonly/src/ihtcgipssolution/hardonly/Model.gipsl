package "ihtcgipssolution.hardonly"
import "platform:/resource/ihtcmetamodel/model/Ihtcmetamodel.ecore"

//
// This specification only uses the absolutely necessary
// hard constraints from the task (H1-H6).
//

//
// Configuration
//

config {
	solver := GUROBI;
	timeLimit := true [value := 300.0];
	randomSeed := true [value := 0];
	presolve := auto;
	debugOutput := false;
	// lpOutput := true [path := "gurobi.lp"];
//	threadCount := true [value := 4];
}

//
// GT
//

rule assignNurseToRoomShift {
	h: Hospital {
		-nurses -> n
		-shifts -> s
		-rooms -> r
	}

	n: Nurse {
		-shiftMaxLoads -> sml
	}

	s: Shift

	r: Room

	++ rsna: RoomShiftNurseAssignment {
		++ -nurse -> n
		++ -shift -> s
		++ -room -> r
	}

	sml: NurseShiftMaxLoad {
		-shift -> s
	}
	# sml.maxLoad > 0
}

rule assignAdmissionDayToPatient {
	h: Hospital {
		-patients -> p
		-days -> d
	}

	p: Patient {
		++ -admissionDay -> d
	}

	d: Day
	# p.surgeryReleaseDay <= d.id
	# p.surgeryDueDate >= d.id
}

// H2: Compatible rooms: Patients can only be assigned to one of
// their compatible rooms
pattern roomPatientIncompatible {
	h: Hospital {
		-patients -> p
		-rooms -> r
	}

	p: Patient {
		-incompatibleRooms -> r
	}

	r: Room
}

condition roomNotIncompatible = forbid roomPatientIncompatible

rule assignRoomToPatient {
	h: Hospital {
		-patients -> p
		-rooms -> r
	}

	p: Patient {
		++ -assignedRoom -> r
	}

	r: Room
}
when roomNotIncompatible

rule assignSurgeryToPatient {
	h: Hospital {
		-patients -> p
		-surgeons -> s
		-days -> d
		-operatingTheaters -> ot
	}

	p: Patient {
		++ -surgeryAssignment -> sa
		-surgeon -> s
	}

	s: Surgeon {
		-availabilities -> as
	}

	d: Day

	ot: OperatingTheater {
		-availabilities -> aot
	}

	++ sa: SurgeryAssignment {
		++ -patient -> p
		++ -surgeon -> s
		++ -operationTheater -> ot
		++ -day -> d
	}

	aot: OperatingTheaterAvailability {
		-day -> d
	}

	# aot.availability > 0
	
	as: SurgeonAvailability {
		-day -> d
	}
	# as.availability > 0
}

pattern dayRoomTuple {
	h: Hospital {
		-days -> d
		-rooms -> r
	}

	d: Day

	r: Room
}

pattern daySurgeonTuple {
	h: Hospital {
		-days -> d
		-surgeons -> s
	}

	d: Day

	s: Surgeon
}

pattern dayOperatingTheaterAvailabilityTriple {
	h: Hospital {
		-days -> d
		-operatingTheaters -> ot
	}

	d: Day

	ot: OperatingTheater {
		-availabilities -> aot
	}

	aot: OperatingTheaterAvailability
	# aot.availability > 0
}

pattern findMandatoryPatient {
	h: Hospital {
		-patients -> p
	}

	p: Patient
	# p.mandatory == true
}

pattern findOptionalPatient {
	h: Hospital {
		-patients -> p
	}

	p: Patient
	# p.mandatory == false
}

pattern dayPatientTuple {
	h: Hospital {
		-patients -> p
		-days -> d
	}

	p: Patient

	d: Day
	# p.surgeryReleaseDay <= d.id
	# p.surgeryDueDate + p.lengthOfStay - 1 >= d.id
}

pattern roomShiftTuple {
	h: Hospital {
		-rooms -> r
		-shifts -> s
	}

	r: Room

	s: Shift
}

pattern patientRoomDay {
	h: Hospital {
		-rooms -> r
		-patients -> p
		-days -> d
	}

	r: Room

	p: Patient

	d: Day
	# p.surgeryReleaseDay <= d.id
	# p.surgeryDueDate + p.lengthOfStay - 1 >= d.id
}

pattern occupantRoomDay {
	h: Hospital {
		-rooms -> r
		-occupants -> o
		-days -> d
	}

	r: Room

	o: Occupant

	d: Day
	# r.name == o.roomId
	# o.lengthOfStay >= d.id
}

pattern dayRoomGender {
	h: Hospital {
		-days -> d
		-rooms -> r
		-genders -> g
	}

	d: Day

	r: Room

	g: Gender
}

//
// GIPSL
//

//
// Mappings
//

// Assign nurse to a room and shift
mapping anrs to assignNurseToRoomShift;

// Assign an admission day to a patient
mapping aadp to assignAdmissionDayToPatient;

// Assign a room to a patient
mapping arp to assignRoomToPatient;

// Assign a surgery to a patient
mapping asp to assignSurgeryToPatient;

// Mapping that holds the information if a patient `p` is scheduled for day `d` in room `r`
mapping roomDayPatientLoad to patientRoomDay;

// Mapping that holds the cumulative number of all patients on day `d` in room `r`
mapping roomDayLoad to dayRoomTuple {
	var load : EInt
};

// Mapping that is true if gender `g` is contained in room `r` on day `d`
mapping roomDayGender to dayRoomGender;

//
// Constraints
//

// This constraint sets the respective `roomDayGender` mapping to 1
// if and only if the gender `g` is present in room `r` on day `d`.
constraint with roomDayGender {
	mappings.roomDayPatientLoad->filter( //
		element.nodes.d == context.nodes.d //
		& element.nodes.r == context.nodes.r //
		& element.nodes.p.gender == context.nodes.g.name //
	)->sum(element.value)
	+
	patterns.occupantRoomDay->filter( //
		element.nodes.d == context.nodes.d //
		& element.nodes.r == context.nodes.r //
		& element.nodes.o.gender == context.nodes.g.name //
	)->sum(1)
	<=
	1000 * context.value
	&
	mappings.roomDayPatientLoad->filter( //
		element.nodes.d == context.nodes.d //
		& element.nodes.r == context.nodes.r //
		& element.nodes.p.gender == context.nodes.g.name //
	)->sum(element.value)
	+
	patterns.occupantRoomDay->filter( //
		element.nodes.d == context.nodes.d //
		& element.nodes.r == context.nodes.r //
		& element.nodes.o.gender == context.nodes.g.name //
	)->sum(1)
	>=
	context.value
}

// If a patient `p` is scheduled for room `r` on a day `d` that is within the
// patients scheduled time frame, set the respective mapping variable to 1.
constraint with roomDayPatientLoad {
	// The following three sub constraints are the complex workaround for not having
	// to use an Boolean equivalence. This reduces the matrix sizes massively.
	//
	// If patient `p` gets assign to room `r`
	// and if patient `p` is assigned to the correct time frame,
	// set the context value to 1.
	mappings.aadp->filter( //
		element.nodes.p == context.nodes.p //
		& element.nodes.d.id - 1 <= context.nodes.d.id //
		& element.nodes.d.id + context.nodes.p.lengthOfStay - 1 >= context.nodes.d.id //
	)->sum(element.value)
	+
	mappings.arp->filter( //
		element.nodes.p == context.nodes.p //
		& element.nodes.r == context.nodes.r //
	)->sum(element.value)
	- 1
	<=
	context.value
	&

	// If the context value is 1, the patient must have to correct time frame.
	mappings.aadp->filter( //
		element.nodes.p == context.nodes.p //
		& element.nodes.d.id - 1 <= context.nodes.d.id //
		& element.nodes.d.id + context.nodes.p.lengthOfStay - 1 >= context.nodes.d.id //
	)->sum(element.value)
	>=
	context.value
	&

	// If the context value is 1, the patient must be located in the correct room.
	mappings.arp->filter( //
		element.nodes.p == context.nodes.p //
		& element.nodes.r == context.nodes.r //
	)->sum(element.value)
	>=
	context.value
}

// The room `r` has a specific load (=number of patients and occupants)
// on day `d`. This value must be saved in the free mapping variable
// `load` for each room `r` on each day `d`.
// load_r = number_of_patients(r,d) + number_of_occupants(r,d) 
constraint with roomDayLoad {
	context.variables.load
	==
	// patients
	mappings.roomDayPatientLoad->filter( //
		element.nodes.r == context.nodes.r //
		& element.nodes.d == context.nodes.d //
	)->sum(element.value)
	+
	// occupants
	patterns.occupantRoomDay->filter(element.nodes.r == context.nodes.r & element.nodes.d == context.nodes.d)->sum(1)
}

// H1: No gender mix per room
//
// Translation: at most one gender must be present in a room `r` on day `d`
constraint with dayRoomTuple {
	mappings.roomDayGender->filter(
		element.nodes.r == context.nodes.r //
		& element.nodes.d == context.nodes.d //
	)->sum(element.value)
	<=
	1
}

// H7: Room capacity: The number of patients in each room in each day cannot
// exceed the capacity of the room.
constraint with roomDayLoad {
	context.variables.load <= context.nodes.r.capacity
}

// H3: Surgeon overtime: The maximum surgery time of a surgeon must not be exceeded.
constraint with daySurgeonTuple {
	// find variable assigned surgery time for a specific day and surgeon
	mappings.asp->filter( //
		element.nodes.d == context.nodes.d //
		& element.nodes.s == context.nodes.s
	)->sum(element.nodes.p.surgeryDuration * element.value)

	// must be smaller or equal to the surgeon's availability
	<=

	// get the surgeon's availability for the same specific day
	context.nodes.s.availabilities->filter(element.day == context.nodes.d)->sum(element.availability)
}

// H4: OT overtime: The duration of all surgeries allocated to an OT on a day
// must not exceed its maximum capacity.
constraint with dayOperatingTheaterAvailabilityTriple {
	// find variable assigned surgeries for a specific day and operating theater
	mappings.asp->filter( //
		element.nodes.d == context.nodes.d //
		& element.nodes.ot == context.nodes.ot //
	)->sum(element.nodes.p.surgeryDuration * element.value)

	// must be smaller of equal to the operating theater's maximum capacity
	<=

	// get the operating theater's capacity for the same specific day
	context.nodes.ot.availabilities->filter(element.day == context.nodes.d)->sum(element.availability)
}

// H5: Mandatory versus optional patients: All mandatory patients must be admitted within the
// scheduling period, whereas optional patients may be postponed to future scheduling periods.
//
// This constraint ensures that all mandatory patients will be included.
constraint with findMandatoryPatient {
	// All mandatory patients get an admission day.
	mappings.aadp->filter(element.nodes.p == context.nodes.p)->sum(element.value) == 1
	&
	// All mandatory patients get a room.
	mappings.arp->filter(element.nodes.p == context.nodes.p)->sum(element.value) == 1
}

// 2.2 Solution: "i. the admission date for patients, or, in the case of optional patients,
// potentially their postponement to the next scheduling period;"
//
// "â€“ mandatory/optional: mandatory patients must be admitted during the
// scheduling period, while the admission of optional patients can be postponed
// until a future scheduling period."
//
// "H5 Mandatory versus optional patients: All mandatory patients must be admitted within
// the scheduling period, whereas optional patients may be postponed to future scheduling
// periods."
//
// This constraint ensures that optional patients must not be included.
constraint with findOptionalPatient {
	// Optional patients can have an admission day
	mappings.aadp->filter(element.nodes.p == context.nodes.p)->sum(element.value) == 0
	&
	// Optional patients can have an assigned room
	mappings.arp->filter(element.nodes.p == context.nodes.p)->sum(element.value) == 0
}

// H6: Admission day: A patient can be admitted on any day from their release
// date to their due date. Given that optional patients do not have a due date,
// they can be admitted on any day after their release date.
//
// Part 1: A patient can be admitted on any day from their release date to their due date.
constraint with findMandatoryPatient {
	mappings.aadp->filter( //
		element.nodes.p == context.nodes.p //
		// the following two constraints will be checked via the LHS of the GT rule
		// & element.nodes.d.id >= context.nodes.p.surgeryReleaseDay //
		// & element.nodes.d.id <= context.nodes.p.surgeryDueDate //
	)->sum(element.value)
	== 1
}

// 2.2 Solution: "Note that a patient stays in only one room during the entire length of their
// stay, meaning a patient cannot be transferred from one room to another."
//
// This constraint ensures that each patient is located in at most one room.
constraint with Patient {
	mappings.arp->filter(element.nodes.p == context)->sum(element.value) <= 1
}

// 2.2 Solution: "We also assume that all patients undergo surgery, and that this takes place
// on the day of admission."
//
// Connect all patient admission days to the surgery days.
constraint with dayPatientTuple {
	// This is a shortcut specification for the following constraint:
	// "If the admission day `d` will be assigned to patient `p`, the patient `p` must
	// also have their surgery on day `d` (and vice versa)."
	// Normally, one would implement this with the Boolean equivalence operator `<=>`
	// but since we do only allow one surgery per patient and also only one admission
	// day per patient, this constraint effectively does the same but with way less
	// helper constraints necessary.
	mappings.aadp->filter(element.nodes.p == context.nodes.p & element.nodes.d == context.nodes.d)->sum(element.value)
	==
	mappings.asp->filter(element.nodes.p == context.nodes.p & element.nodes.d == context.nodes.d)->sum(element.value)
}

// 2.2 Solution: "A nurse can be assigned to more than one room in each shift (but only one
// nurse is assigned to a room in a shift). Finally, note that it is necessary to assign
// a nurse to a room on a given shift only if that room contains patients on the day
// to which the shift belongs. Nevertheless, assigning nurses to empty rooms would
// be feasible and does not incur additional costs."
//
// This constraint ensures that there is at most one nurse per room per shift.
constraint with roomShiftTuple {
	mappings.anrs->filter(element.nodes.r == context.nodes.r & element.nodes.s == context.nodes.s)->sum(element.value)
	<= 1
}

// 2.2 Solution: "A nurse can be assigned to more than one room in each shift (but only one
// nurse is assigned to a room in a shift). Finally, note that it is necessary to assign
// a nurse to a room on a given shift only if that room contains patients on the day
// to which the shift belongs. Nevertheless, assigning nurses to empty rooms would
// be feasible and does not incur additional costs."
//
// This constraint ensures that there is at least one nurse per room that contains patients in a shift.
constraint with roomShiftTuple {
	// This is a shortcut specification for the following constraint:
	// If there is at least one patient `p` assigned to room `r` on day `d`,
	// there must be a nurse assigned to room `r` in shift `s` (that is part of day `d`).
	mappings.roomDayLoad->filter( //
		element.nodes.r == context.nodes.r //
		& element.nodes.d == context.nodes.s.day //
	)->sum(element.variables.load)
	<=
	mappings.anrs->filter(element.nodes.r == context.nodes.r & element.nodes.s == context.nodes.s)->sum(element.value)
	*
	1000
}
